---
import Markdown from '../../components/Markdown.astro';
import DocsLayout from '../../layouts/DocsLayout.astro';
import { getCollection } from 'astro:content';
import Toc from '../../components/Toc';
import {
	getSideBarLinks,
	getNestedSideBarLinks,
	isNested,
	nextDoc,
	githubEditLink,
	cleanSideBarTitle,
} from '../../util/docsUtils';
import Footer from '../../components/docs/Footer.astro';
import NextButton from '../../components/NextButton.astro';

export async function getStaticPaths() {
	const docs = await getCollection('docs');

	return docs.map((doc) => {
		return {
			params: {
				slug: doc.slug,
			},
			props: {
				doc,
			},
		};
	});
}

const { doc } = Astro.props;
const { Content, headings } = await doc.render();
const slug = doc.slug;
const normalLinks = await getSideBarLinks();
const nestedLinks = await getNestedSideBarLinks(slug);
// If a document is nested, we need to check if it has more than one nested document
// Directories that have only one doc (e.g /docs/cloud/cloud.md) should not have a nested sidebar
const hasEnoughNestedDocs =
	nestedLinks.length > 1 || nestedLinks[0].items.length > 1;
const isNestedSideBar = isNested(slug) && hasEnoughNestedDocs;
const links = isNestedSideBar ? nestedLinks : normalLinks;
const nextDocument = await nextDoc(`/docs/${slug}`);
const docTitle =
	doc?.data?.title || cleanSideBarTitle(slug.split('/').at(-1) as string);
---

<DocsLayout
	isNestedDoc={isNestedSideBar}
	sideBarMenuSections={links}
	title={`${docTitle} | Tembo Docs`}
	description={doc?.data?.description}
>
	<div class='flex flex-col relative w-full'>
		<div id='tembo-document' class='flex justify-between w-full mb-12'>
			<div
				class='flex flex-col gap-12 w-full mobile:mr-16 xl:mr-28 overflow-x-hidden max-w-[900px]'
			>
				<header>
					<h1
						class='text-neon font-extrabold text-3xl lg:text-4xl xl:text-5xl z-10'
					>
						{docTitle}
					</h1>
				</header>
				<Markdown classNames='max-w-none'>
					<Content />
				</Markdown>
				<NextButton
					title={nextDocument.title}
					label='Next'
					subTitle={nextDocument.parentLabel}
					slug={nextDocument.slug}
					classNames='max-w-[450px] w-full self-end'
					subTitleStyles='text-neon'
				/>
			</div>
			<div>
				<div
					class='hidden mobile:flex flex-col items-start w-max mobile:sticky mobile:top-[133px]'
				>
					{
						headings.length > 0 && (
							<Toc
								headings={headings.filter(
									(heading) => heading.depth !== 1,
								)}
								titleStyles='bg-gradient-to-r from-salmon via-purple to-lightPurple text-transparent bg-clip-text text-sm'
								title='ON THIS PAGE'
								isDocs
								offset={60}
								client:load
							/>
						)
					}
				</div>
			</div>
		</div>
		<Footer editLink={githubEditLink(doc.id)} />
	</div>
</DocsLayout>

<script is:inline>
	window.initSearch = async () => {
		// load the pagefind script
		window.pagefind = await import('/pagefind/pagefind.js');
	};
</script>

<style is:global>
	.DocsSearchDialogOverlay {
		background-color: rgba(0, 0, 0, 0.5);
		position: fixed;
		inset: 0;
		animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
		z-index: 10;
	}

	.DocsSearchDialogContent {
		animation: contentShow 200ms cubic-bezier(0.16, 1, 0.3, 1);
	}

	.gradient-search-item:hover {
		border: 1px solid #0000;
		background:
			linear-gradient(#1c1c1c, #1c1c1c) padding-box,
			linear-gradient(
					68.42deg,
					#f77577 0%,
					#db39cb 79.07%,
					#ca6fe5 170.36%
				)
				border-box;
	}

	@keyframes overlayShow {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
	@keyframes contentShow {
		from {
			opacity: 0;
			transform: translate(-50%, -48%) scale(0.96);
		}
		to {
			opacity: 1;
			transform: translate(-50%, -50%) scale(1);
		}
	}
</style>
