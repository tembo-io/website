"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8281],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,c=u["".concat(l,".").concat(h)]||u[h]||m[h]||r;return n?o.createElement(c,i(i({ref:t},d),{},{components:n})):o.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={slug:"four-types-of-extensions",title:"Enter the matrix: the four types of Postgres extensions",authors:["steven"],tags:["postgres","extensions","trunk"]},i=void 0,s={permalink:"/blog/four-types-of-extensions",editUrl:"https://github.com/tembo-io/website/blob/main/blog/2023-09-14-four-types-of-extensions/index.md",source:"@site/blog/2023-09-14-four-types-of-extensions/index.md",title:"Enter the matrix: the four types of Postgres extensions",description:"Before working for a Postgres company, I had never used extensions.",date:"2023-09-14T00:00:00.000Z",formattedDate:"September 14, 2023",tags:[{label:"postgres",permalink:"/blog/tags/postgres"},{label:"extensions",permalink:"/blog/tags/extensions"},{label:"trunk",permalink:"/blog/tags/trunk"}],readingTime:12.05,hasTruncateMarker:!1,authors:[{name:"Steven Miller",title:"Founding Engineer",url:"https://github.com/sjmiller609",email:"noreply@tembo.io",imageURL:"https://github.com/sjmiller609.png",key:"steven"}],frontMatter:{slug:"four-types-of-extensions",title:"Enter the matrix: the four types of Postgres extensions",authors:["steven"],tags:["postgres","extensions","trunk"]},prevItem:{title:"Postgres 16: The exciting and the unnoticed",permalink:"/blog/postgres-16"},nextItem:{title:"Tembo Stacks: Making Postgres the Everything Database",permalink:"/blog/tembo-stacks-intro"}},l={authorsImageUrls:[void 0]},p=[{value:"Turn on an extension",id:"turn-on-an-extension",level:2},{value:"Terminology",id:"terminology",level:3},{value:"Enter the matrix",id:"enter-the-matrix",level:2},{value:"LOAD",id:"load",level:3},{value:"CREATE EXTENSION",id:"create-extension",level:3},{value:"Hooks that require a restart",id:"hooks-that-require-a-restart",level:3},{value:"LOAD is needed when there isn&#39;t a control file",id:"load-is-needed-when-there-isnt-a-control-file",level:3},{value:"You don&#39;t load hooks during CREATE EXTENSION",id:"you-dont-load-hooks-during-create-extension",level:3},{value:"Output plugins",id:"output-plugins",level:3},{value:"Installing extensions",id:"installing-extensions",level:2},{value:"Automate everything",id:"automate-everything",level:2},{value:"Dear experts, tell me how I&#39;m wrong (seriously!)",id:"dear-experts-tell-me-how-im-wrong-seriously",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Before working for a Postgres company, I had never used extensions."),(0,a.kt)("p",null,"Now, I'm part of a team working to fully automate turning on any extension. I didn't find great resources to explain the process of turning on an extension, and why it varies between different extensions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"I want to share my mental model for the different types of extensions, how to know what type of extension you're working with, and how to get it turned on.")),(0,a.kt)("h2",{id:"turn-on-an-extension"},"Turn on an extension"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"one-does-not-simply",src:n(39377).Z,width:"651",height:"383"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"What's traditionally involved:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Find the extension you want"),(0,a.kt)("li",{parentName:"ul"},"Figure out how to build it"),(0,a.kt)("li",{parentName:"ul"},"Sometimes, installation of dependencies (for example with ",(0,a.kt)("em",{parentName:"li"},"apt-get")," or ",(0,a.kt)("em",{parentName:"li"},"yum"),")"),(0,a.kt)("li",{parentName:"ul"},"Sometimes, installation of other extensions (",(0,a.kt)("em",{parentName:"li"},"goto")," \u2018figure out how to build it\u2019)"),(0,a.kt)("li",{parentName:"ul"},"Install your extension"),(0,a.kt)("li",{parentName:"ul"},"Sometimes, load a library"),(0,a.kt)("li",{parentName:"ul"},"Sometimes, provide extension-specific configurations"),(0,a.kt)("li",{parentName:"ul"},"Sometimes, run the ",(0,a.kt)("inlineCode",{parentName:"li"},"CREATE EXTENSION")," command")),(0,a.kt)("p",null,"Building and installing extensions is well covered by other resources. In this blog, I want to focus on steps to get an extension up and running after it's installed, and how ",(0,a.kt)("strong",{parentName:"p"},"I believe that all extensions fit into four mostly-tidy categories.")),(0,a.kt)("h3",{id:"terminology"},"Terminology"),(0,a.kt)("p",null,"Extensions consist of ",(0,a.kt)("strong",{parentName:"p"},"SQL")," and / or ",(0,a.kt)("strong",{parentName:"p"},"libraries"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"library")," simply means compiled code, for example written in ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/xfunc-c.html"},"C")," or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pgcentralfoundation/pgrx"},"Rust"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/current/extend-extensions.html#:~:text=A%20useful%20extension%20to%20PostgreSQL,package%20to%20simplify%20database%20management."},"SQL objects")),", let's just call it SQL, are extensions of SQL, for example new functions and data types. These are often implemented by a library, but can also be implemented in other ways, for example using a procedural language like ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/plpgsql.html"},"PL/pgSQL"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Hooks:")," A Postgres feature informally called ",(0,a.kt)("em",{parentName:"p"},"hooks")," can be used to connect into Postgres' existing functionality. Hooks allow for overwriting default Postgres functionality, or calling back into an extension's code at the appropriate time. For example, one type of hook can modify Postgres start up behavior to launch a background worker, and a different type of hook can be used to redirect queries to a different table."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Sometimes extensions are instead referred to as 'modules', but I like to simply refer to everything as an 'extension', but feel free to @ me on X to tell me why that's wrong (",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/sjmiller609"},"@sjmiller609"),").")),(0,a.kt)("h2",{id:"enter-the-matrix"},"Enter the matrix"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"im-in-matrix",src:n(68847).Z,width:"498",height:"278"})),(0,a.kt)("p",null,"A big part of what I have been working on is fully automating enabling any extension. In order to do that, we have to understand exactly how extensions vary. We can break it down into a 2x2 matrix by defining two boolean categories."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requires ",(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/current/sql-load.html"},"LOAD"))," true or false and ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/current/sql-createextension.html"},"CREATE EXTENSION"))," true or false:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Requires ",(0,a.kt)("inlineCode",{parentName:"th"},"CREATE EXTENSION")),(0,a.kt)("th",{parentName:"tr",align:null},"Does not require ",(0,a.kt)("inlineCode",{parentName:"th"},"CREATE EXTENSION")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"))),(0,a.kt)("td",{parentName:"tr",align:null},"Extensions that use SQL and their libraries have hooks"),(0,a.kt)("td",{parentName:"tr",align:null},"Extensions that do not use SQL, may or may not have hooks")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Does not require ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"))),(0,a.kt)("td",{parentName:"tr",align:null},"SQL-only extensions, and SQL + libraries without hooks"),(0,a.kt)("td",{parentName:"tr",align:null},"Output plugins")))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"By categorizing an extension into this 2x2 matrix, we can know how to turn it on.")),(0,a.kt)("h3",{id:"load"},"LOAD"),(0,a.kt)("p",null," ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-load.html"},"LOAD")," is a command that tells Postgres to ",(0,a.kt)("em",{parentName:"p"},"load")," a library, meaning make the code accessible to Postgres by loading the compiled code on disk into memory. If a library has hooks, ",(0,a.kt)("strong",{parentName:"p"},"performing a load will activate the hooks"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"),": true")," means you have to do one of the following steps to load a library:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/current/sql-load.html"},"LOAD")),": using the ",(0,a.kt)("inlineCode",{parentName:"li"},"LOAD")," command directly loads a library for the current connection only"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/15/runtime-config-client.html#GUC-LOCAL-PRELOAD-LIBRARIES:~:text=at%20session_preload_libraries%20instead.-,session_preload_libraries,-(string)"},"session_preload_libraries")),": configuration, specifies which libraries to LOAD for new connections"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.postgresql.org/docs/15/runtime-config-client.html#GUC-LOCAL-PRELOAD-LIBRARIES:~:text=pooling%20is%20used.-,shared_preload_libraries,-(string)"},"shared_preload_libraries")),": configuration, specifies which libraries to LOAD at server start, and therefore requires a restart")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Even though code is loaded in other ways during ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION"),", that is not ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"),": true")," under this definition. I mean that the user must do something other than ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," to load in libraries. Also, we are conflating ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/15/runtime-config-client.html#GUC-LOCAL-PRELOAD-LIBRARIES:~:text=load%20that%20module.-,local_preload_libraries,-(string)"},"local_preload_libraries")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"session_preload_libraries")," to simplify things in this blog post.")),(0,a.kt)("p",null,"For example, if you installed the extension ",(0,a.kt)("a",{parentName:"p",href:"https://pgt.dev/extensions/auto_explain"},"auto explain"),", then you may have a library file called ",(0,a.kt)("inlineCode",{parentName:"p"},"auto_explain.so")," in your library directory, which can be found with ",(0,a.kt)("a",{parentName:"p",href:"https://pgpedia.info/d/dynamic_library_path.html"},"pg_config --pkglibdir"),". Libraries are not always named exactly the same as the extension."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ trunk install auto_explain\n\nUsing pkglibdir: /var/lib/postgresql/data/tembo/15/lib\n\n[+] auto_explain.so => /var/lib/postgresql/data/tembo/15/lib\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ls $(pg_config --pkglibdir) | grep auto_explain\nauto_explain.so\n")),(0,a.kt)("p",null,"Auto explain can be loaded into your session like ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD 'auto_explain';"),". This command will always match exactly the name of the library file, less the file type, in this example ",(0,a.kt)("inlineCode",{parentName:"p"},".so"),". With a ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/auto-explain.html#AUTO-EXPLAIN-EXAMPLE"},"couple of configurations"),", now this extension will automatically log the ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-explain.html"},"EXPLAIN ANALYZE")," output for long-running queries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"postgres=# LOAD 'auto_explain';\nLOAD\n")),(0,a.kt)("p",null,"However, the ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," command is not typically used directly, and many extensions require you do not load them in this way. Instead, typically the Postgres configuration ",(0,a.kt)("a",{parentName:"p",href:"https://pgpedia.info/s/shared_preload_libraries.html"},"shared_preload_libraries")," is used instead."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"postgres=# LOAD 'pg_cron';\nERROR:  pg_cron can only be loaded via shared_preload_libraries\nHINT:  Add pg_cron to the shared_preload_libraries configuration variable in postgresql.conf.\n")),(0,a.kt)("p",null,"The best reason to use ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," directly is for debugging. It can be nice to ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," on-demand while troubleshooting."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"What to do when an extension requires load:")),(0,a.kt)("p",{parentName:"admonition"},"Extensions that ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"),": true")," can always be configured in ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries"),", but this configuration requires a restart to take effect. Some extensions can be loaded without a restart using ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," directly, but in this case it's usually better to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"session_preload_libraries")," configuration, and ",(0,a.kt)("a",{parentName:"p",href:"https://pgpedia.info/p/pg_reload_conf.html"},"reload the Postgres configuration")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT pg_reload_conf();"),". You should run ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," directly when you are intentionally loading for only the current connection.")),(0,a.kt)("h3",{id:"create-extension"},"CREATE EXTENSION"),(0,a.kt)("p",null,"When you run ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-createextension.html"},"CREATE EXTENSION"),", this basically just runs an extension's SQL script. The script will typically create new SQL objects such as functions, data types, operators and so on."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," looks at the extension's ",(0,a.kt)("strong",{parentName:"p"},"control file"),", which is installed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"extension")," directory of ",(0,a.kt)("strong",{parentName:"p"},"sharedir"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ trunk install pg_jsonschema;\n\nUsing pkglibdir: "/var/lib/postgresql/data/tembo/15/lib"\nUsing sharedir: "/var/lib/postgresql/data/tembo"\n\n[+] pg_jsonschema.so => /var/lib/postgresql/data/tembo/15/lib\n[+] extension/pg_jsonschema--0.1.4.sql => /var/lib/postgresql/data/tembo\n[+] extension/pg_jsonschema.control => /var/lib/postgresql/data/tembo\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"sharedir")," can be located with ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_config --sharedir")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$  ls $(pg_config --pkglibdir) | grep pg_jsonschema\npg_jsonschema.so\n\n$ ls $(pg_config --sharedir)/extension | grep pg_jsonschema\npg_jsonschema--0.1.4.sql\npg_jsonschema.control\n")),(0,a.kt)("p",null,"The information in a control file is used to determine what start up or upgrade scripts to run. We'll cover upgrades in-depth in a future blog, so let's focus on first-time enabling. For example, in the above installation output, we notice a file ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_jsonschema--0.1.4.sql"),". Postgres knows to run this because the name of the control file matches the name of the script suffixed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"default_version")," defined in the control file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cat $(pg_config --sharedir)/extension/pg_jsonschema.control\ncomment = 'JSON schema validation on json and jsonb data types'\ndefault_version = '0.1.4'\nmodule_pathname = '$libdir/pg_jsonschema'\nrelocatable = false\nsuperuser = true\n")),(0,a.kt)("p",null,"When running ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION"),", the extension name always matches exactly the name of a control file, less the ",(0,a.kt)("inlineCode",{parentName:"p"},".control")," file type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"postgres=# CREATE EXTENSION pg_jsonschema;\nCREATE EXTENSION\n")),(0,a.kt)("p",null,"I mentioned that a start up script creates new SQL, including new functions. For example in the case of ",(0,a.kt)("a",{parentName:"p",href:"https://pgt.dev/extensions/pg_jsonschema"},"pg_jsonschema"),", the start up script ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_jsonschema--0.1.4.sql")," includes the following SQL to create a new function called ",(0,a.kt)("inlineCode",{parentName:"p"},"jsonb_matches_schema"),". Even though we have a library file, we don't need ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," because ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE FUNCTION")," is another way to load code from a file. This is an example of ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"),": false"),", ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"CREATE EXTENSION"),": true"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-createfunction.html"},"CREATE FUNCTION ... AS 'obj_file' documentation")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"obj_file is the name of the shared library file containing the compiled ","[code]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CREATE FUNCTION "jsonb_matches_schema"(\n        "schema" json,\n        "instance" jsonb\n) RETURNS bool\nIMMUTABLE STRICT\nLANGUAGE c\nAS \'MODULE_PATHNAME\', \'jsonb_matches_schema_wrapper\';\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can always know whether or not an extension requires ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," by the presence of a control file in ",(0,a.kt)("inlineCode",{parentName:"p"},"$(pg_config --sharedir)/extension"))),(0,a.kt)("h3",{id:"hooks-that-require-a-restart"},"Hooks that require a restart"),(0,a.kt)("p",null,"An extension is in the category ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"CREATE EXTENSION"),": true")," and ",(0,a.kt)("strong",{parentName:"p"},"requires ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD"),": true")," if the extension has libraries that use hooks which require a restart and it has a control file."),(0,a.kt)("p",null,"You will be able to identify this is the case when the extension's documentation mentions both ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries"),". Sometimes an error message or hint is provided if you run ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," before loaded the library, or if you try to run ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," directly, but you can't count on that."),(0,a.kt)("p",null,"For example, in the case of both ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_cron")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_partman"),", there are a background workers. These are examples of extensions using hooks in the start up process of Postgres. So, in both of these cases the user is expected to configure ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries")," to start the background worker, then run ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," on a cluster where that background worker is already running."),(0,a.kt)("h3",{id:"load-is-needed-when-there-isnt-a-control-file"},"LOAD is needed when there isn't a control file"),(0,a.kt)("p",null,"In the case of auto_explain, it uses hooks that do not require a restart. In this case, there is no control file and no extra SQL objects to be created. So ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," is required simply because we have to load it into memory somehow. To demonstrate, it is technically possible to make a control file for auto_explain to allow for ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," behavior instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD"),":"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"auto_explain.control:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"comment = 'auto explain'\ndefault_version = '0.0.1'\nmodule_pathname = '$libdir/auto_explain'\nrelocatable = false\nsuperuser = true\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"auto_explain--0.0.1.sql")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"LOAD 'auto_explain';\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"In practice, do not use ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," in an extension start up script to activate hooks. ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," is only applicable for the current connection.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"postgres=# CREATE EXTENSION auto_explain;\nCREATE EXTENSION\n\npostgres=# \\dx\n                     List of installed extensions\n      Name       | Version |   Schema   |         Description\n-----------------+---------+------------+------------------------------\n auto_explain    | 0.0.1   | public     | auto explain\n plpgsql         | 1.0     | pg_catalog | PL/pgSQL procedural language\n(2 rows)\n\npostgres=# SET auto_explain.log_min_duration = 0;\nSET\npostgres=# SET auto_explain.log_analyze = true;\nSET\n")),(0,a.kt)("p",null,"After running the above, now my subsequent queries have their ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPLAIN ANALYZE")," logged."),(0,a.kt)("p",null,"So, if that could work, ",(0,a.kt)("strong",{parentName:"p"},"why not just have control files for all extensions?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Having a control file requires version upgrade handling.")),(0,a.kt)("p",null,"When you have a control file, you also have to write upgrade scripts for every new version. In the case of pg_cron, we can find all these files in ",(0,a.kt)("strong",{parentName:"p"},"sharedir"),". When enabling version 1.5, it will run ",(0,a.kt)("inlineCode",{parentName:"p"},"pg_cron--1.0.sql"),", then each migration script up to 1.5."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pg_cron--1.0--1.1.sql\npg_cron--1.0.sql\npg_cron--1.1--1.2.sql\npg_cron--1.2--1.3.sql\npg_cron--1.3--1.4.sql\npg_cron--1.4-1--1.5.sql\npg_cron--1.4--1.4-1.sql\npg_cron.control\n")),(0,a.kt)("p",null,"Since that's not really applicable on auto_explain, because it's just logging outputs and there is nothing to migrate or handle between versions, it's just cleaner to not have a control file. Upgrading auto_explain only involves replacing the library, then loading it again."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Upgrade logic is not applicable for extensions that do not require ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION"),". These cases just involve re-loading a new version of the library.")),(0,a.kt)("h3",{id:"you-dont-load-hooks-during-create-extension"},"You don't load hooks during CREATE EXTENSION"),(0,a.kt)("p",null,"It made sense to me for activating hooks that require a restart they have to be configured in ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries"),". But for extensions that do not require a restart, it's not obvious why the hooks can't just be loaded during the ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," start up script like I just demonstrated is possible with auto_explain."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Even though it's technically possible to ",(0,a.kt)("inlineCode",{parentName:"strong"},"LOAD")," hooks during ",(0,a.kt)("inlineCode",{parentName:"strong"},"CREATE EXTENSION"),", it's a bad idea.")),(0,a.kt)("p",null,"First of all, when using the ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," command directly, it's only applicable to the current connection. So, in the above example with auto explain, the queries are only logged in the connection where I ran ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION"),". To apply to all connections without a restart, it would need to go into ",(0,a.kt)("inlineCode",{parentName:"p"},"session_preload_libraries"),". It is technically possible to do that inside of ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," by doing ",(0,a.kt)("inlineCode",{parentName:"p"},"ALTER SYSTEM SET session_preload_libraries")," then ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT pg_reload_conf()")," in your start up script, but it is not a good approach for ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," to automatically perform a configuration update. First of all it would confuse a user to change a config on the fly, and secondly there is currently no concept to automatically merge multi-value, comma-separated configurations like ",(0,a.kt)("inlineCode",{parentName:"p"},"session_preload_libraries"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The 2x2 matrix makes it easier to understand how to enable an extension."),(0,a.kt)("p",{parentName:"admonition"},'Just ask yourself "do I need to run ',(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION"),'?" determined by presence of a control file, and "do I need to do a ',(0,a.kt)("inlineCode",{parentName:"p"},"LOAD"),'?" determined by any mention of ',(0,a.kt)("inlineCode",{parentName:"p"},"LOAD"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"session_preload_libraries")," in the extension's documentation or an error message."),(0,a.kt)("p",{parentName:"admonition"},"In all cases of needing a ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD"),", you can get away with setting it in ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_preload_libraries"),". You can optimize to avoid restarts in some cases.")),(0,a.kt)("h3",{id:"output-plugins"},"Output plugins"),(0,a.kt)("p",null,"There are some extensions, for example ",(0,a.kt)("a",{parentName:"p",href:"https://pgt.dev/extensions/wal2json"},"wal2json")," that require neither ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD"),". In all known cases so far, these are ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},"output plugins"),". I think it's more of a stretch to call these 'extensions', but since they provide additional functionality to Postgres, that counts in my book."),(0,a.kt)("p",null,"In the case of output plugins, the library is loaded when a replication slot is created:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/logicaldecoding-example.html"},"Postgresql documentation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding', false, true);\n")),(0,a.kt)("h2",{id:"installing-extensions"},"Installing extensions"),(0,a.kt)("p",null,"Some of the above examples use the free and open source ",(0,a.kt)("a",{parentName:"p",href:"https://pgt.dev"},"Trunk project")," that Tembo created, which allows us to skip the build process. It also installs extension dependencies, and provides metadata about other dependencies. When I'm trying out extensions, I am starting from one of Tembo\u2019s container images to handle the system dependencies installation."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"I wrote ",(0,a.kt)("a",{parentName:"strong",href:"https://tembo.io/docs/tembo-cloud/try-extensions-locally"},"this guide")," for trying out extensions locally"),". If you have any issues just reach out on our ",(0,a.kt)("a",{parentName:"p",href:"https://join.slack.com/t/tembocommunity/shared_invite/zt-20v3m8pwz-pPjeFaWSM~Bt3KUqDXff2A"},"community Slack channel")," and we can help."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Perhaps it's not so bad after all...")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"files-in-computer",src:n(37702).Z,width:"500",height:"213"})),(0,a.kt)("h2",{id:"automate-everything"},"Automate everything"),(0,a.kt)("p",null,"We want to make it possible to automatically install and turn on any Postgres extension. For this reason, we are seeking to qualify all known extensions by these two dimensions: requires ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE EXTENSION")," true or false, and requires ",(0,a.kt)("inlineCode",{parentName:"p"},"LOAD")," true or false."),(0,a.kt)("p",null,"To enable the community, that metadata is being published on ",(0,a.kt)("a",{parentName:"p",href:"https://pgt.dev"},"Trunk"),". On ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.tembo.io"},"Tembo Cloud"),", we leverage that information to automatically enable extensions. Currently, we've got this working for over 150 extensions."),(0,a.kt)("h2",{id:"dear-experts-tell-me-how-im-wrong-seriously"},"Dear experts, tell me how I'm wrong (seriously!)"),(0,a.kt)("p",null,"I'm serious that I want you to tell me where this is incorrect! If you're a Postgres extensions expert, or maybe just know a thing or two about extensions that seems to conflict with something in this blog, please reach out on X ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/sjmiller609"},"@sjmiller609")," and let me know. Even if it's just minor correction or subjective information, I'd love to hear from you. I also want to hear if there is an easier mental model than this. I hope this blog can serve as a minimal yet comprehensive explanation of what it takes to get extensions turned on."),(0,a.kt)("p",null,"Another way to contribute is to ",(0,a.kt)("strong",{parentName:"p"},'click the "Edit this page" link below'),", and suggest changes. I will happily accept improvements to this blog."))}m.isMDXComponent=!0},37702:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/files-in-computer-5a613d91e5bd9f281c1b4984e6e20976.gif"},68847:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/im-in-matrix-dc7fbaffd858e30723ad62d60ebdd4a3.gif"},39377:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/one-does-not-simply-095857686f6255714eb3f6df0f595d5b.png"}}]);