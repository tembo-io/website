"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4980],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||a;return n?o.createElement(m,s(s({ref:t},l),{},{components:n})):o.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},98254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={sidebar_position:2,tags:["Postgres Basics"]},s="Connecting to Postgres with C-sharp",i={unversionedId:"postgres_guides/connecting-to-postgres-with-c-sharp/connecting-to-postgres-with-c-sharp",id:"postgres_guides/connecting-to-postgres-with-c-sharp/connecting-to-postgres-with-c-sharp",title:"Connecting to Postgres with C-sharp",description:"In this tutorial, we have provided a thorough, step-by-step guide for creating a connection to a PostgreSQL database using C#. We will utilize the Npgsql package for establishing a connection to the Postgres database.",source:"@site/docs/postgres_guides/connecting-to-postgres-with-c-sharp/connecting-to-postgres-with-c-sharp.md",sourceDirName:"postgres_guides/connecting-to-postgres-with-c-sharp",slug:"/postgres_guides/connecting-to-postgres-with-c-sharp/",permalink:"/docs/postgres_guides/connecting-to-postgres-with-c-sharp/",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/postgres_guides/connecting-to-postgres-with-c-sharp/connecting-to-postgres-with-c-sharp.md",tags:[{label:"Postgres Basics",permalink:"/docs/tags/postgres-basics"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Postgres Basics"]},sidebar:"tutorialSidebar",previous:{title:"All possible joins in Postgres (Inner, Outer, Left, Right, etc)",permalink:"/docs/postgres_guides/all-possible-joins-in-postgres/"},next:{title:"Connecting to Postgres with Java using JDBC",permalink:"/docs/postgres_guides/connecting-to-postgres-with-java/"}},c={},p=[{value:"Conclusion",id:"conclusion",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connecting-to-postgres-with-c-sharp"},"Connecting to Postgres with C-sharp"),(0,r.kt)("p",null,"In this tutorial, we have provided a thorough, step-by-step guide for creating a connection to a PostgreSQL database using C#. We will utilize the Npgsql package for establishing a connection to the Postgres database."),(0,r.kt)("p",null,"Let\u2019s gets started"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1")," - Install the Npsql library in your project. You can install it via .NET command line-interface by running this command in the terminal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dotnet add package Npgsql\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Npgsql is an open source ADO.NET Data Provider for PostgreSQL, it allows C# programs to connect to the PostgreSQL database server. To learn more about Npgsql, ",(0,r.kt)("a",{parentName:"p",href:"https://www.npgsql.org/index.html"},"take a look at its official documentation"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2")," - Create a connection string that includes all the necessary credentials required to setup a connection with Postgres database."),(0,r.kt)("p",null,"This connection string includes credentials - port number, server address, database name, username, and password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'string connectionString = "Host=my_host;\nPort=port_number;\nDatabase=database_name;\nUser Id=username;\nPassword=password;";\n')),(0,r.kt)("p",null,"Do replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"my_host"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"port_number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"database_name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"username"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," parameters with the respective credentials of your database."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3")," - Initialize the ",(0,r.kt)("em",{parentName:"p"},"NpgsqlConnection")," class in your project to setup a connection to the Postgres database. You will also need to use the connection string you have created."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"using NpgsqlConnection connection = new NpgsqlConnection(connectionString);\nconnection.Open();\n")),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"using")," block as a wrapper to make sure that the connection is properly closed when the program exits the ",(0,r.kt)("inlineCode",{parentName:"p"},"using")," block."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4")," - Execute the desired SQL query using the NpgsqlCommand class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'using NpgsqlCommand cmd = new NpgsqlCommand(\u201cSELECT * FROM customers", connection);\n\nusing NpgsqlDataReader reader = cmd.ExecuteReader();\n\nwhile (reader.Read())\n{\n// Use the fetched results\n}\n')),(0,r.kt)("p",null,"Here\u2019s the complete code to connect to a Postgres database with C#:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'using Npgsql;\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = "Host=my_host;Port=port_number;Database=database_name;User Id=username;Password=password;";\n\n        using NpgsqlConnection connection = new NpgsqlConnection(connectionString);\n        connection.Open();\n\n        using NpgsqlCommand cmd = new NpgsqlCommand(\u201cSELECT * FROM customers\u201d, connection);\n\n        using NpgsqlDataReader reader = cmd.ExecuteReader();\n\n        while (reader.Read())\n        {\n            Console.WriteLine(reader["column_name"]);\n            // Use the fetched results\n        }\n    }\n}\n\n')),(0,r.kt)("p",null,"In this example, we have demonstrated how you can read the data, but you can also perform other operations - DML statements like Insert, Update, and DDL statements like Create Table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Insert")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'using NpgsqlCommand cmd = new NpgsqlCommand("INSERT INTO table_name (column1, column2) VALUES (value1, value2)", connection);\n        cmd.Parameters.AddWithValue("value1", "xyz");\n        cmd.Parameters.AddWithValue("value2", 123);\n\n        int rowsAffected = cmd.ExecuteNonQuery();\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Update")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' using NpgsqlCommand cmd = new NpgsqlCommand("UPDATE table_name SET column1 = new_value WHERE column2 = condition", connection);\n        cmd.Parameters.AddWithValue("new_value", "new_data");\n        cmd.Parameters.AddWithValue("condition", "some_condition");\n\n        int rowsAffected = cmd.ExecuteNonQuery();\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create Table")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' using NpgsqlCommand cmd = new NpgsqlCommand("CREATE TABLE table_name (column1 data_type, column2 data_type, column3 data_typet)", connection);\n\n        cmd.ExecuteNonQuery();\n\n')),(0,r.kt)("p",null,"You can simply copy and paste this code snippet to integrate in your project. Just make sure to replace the variables with the database credentials."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this guide, we discussed the step-by-step process to connect to the Postgres database with C#."),(0,r.kt)("p",null,"If you are working on a Python project, you can check out other guide to know how you can connect a Postgres database with Python."),(0,r.kt)("p",null,"Also, check out our new extensions ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/blog/introducing-pgmq"},"pgmq")," and ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/blog/introducing-pg-later"},"pg_later"),"."))}d.isMDXComponent=!0}}]);