"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6285],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,h=u["".concat(c,".").concat(g)]||u[g]||d[g]||s;return n?o.createElement(h,a(a({ref:t},p),{},{components:n})):o.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},45734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=n(87462),r=(n(67294),n(3905));const s={sidebar_position:2,tags:["Postgres Basics"]},a="Connecting to Postgres with Nodejs",i={unversionedId:"postgres_guides/connecting-to-postgres-with-nodejs/connecting-to-postgres-with-nodejs",id:"postgres_guides/connecting-to-postgres-with-nodejs/connecting-to-postgres-with-nodejs",title:"Connecting to Postgres with Nodejs",description:"In this tutorial, we have provided a thorough, step-by-step guide for creating a connection to a PostgreSQL database using Node.js. We will use the pg package for establishing a connection to the Postgres database.",source:"@site/docs/postgres_guides/connecting-to-postgres-with-nodejs/connecting-to-postgres-with-nodejs.md",sourceDirName:"postgres_guides/connecting-to-postgres-with-nodejs",slug:"/postgres_guides/connecting-to-postgres-with-nodejs/",permalink:"/docs/postgres_guides/connecting-to-postgres-with-nodejs/",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/postgres_guides/connecting-to-postgres-with-nodejs/connecting-to-postgres-with-nodejs.md",tags:[{label:"Postgres Basics",permalink:"/docs/tags/postgres-basics"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Postgres Basics"]},sidebar:"tutorialSidebar",previous:{title:"Connecting to Postgres with Java using JDBC",permalink:"/docs/postgres_guides/connecting-to-postgres-with-java/"},next:{title:"Connecting to Postgres with Python",permalink:"/docs/postgres_guides/connecting-to-postgres-with-python/"}},c={},l=[{value:"<code>Insert</code> statements",id:"insert-statements",level:2},{value:"<code>Update</code> statements",id:"update-statements",level:2},{value:"DDL statements like <code>Create Table</code>",id:"ddl-statements-like-create-table",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connecting-to-postgres-with-nodejs"},"Connecting to Postgres with Nodejs"),(0,r.kt)("p",null,"In this tutorial, we have provided a thorough, step-by-step guide for creating a connection to a PostgreSQL database using Node.js. We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pg")," package for establishing a connection to the Postgres database."),(0,r.kt)("p",null,"Let\u2019s get started"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1")," - Install the ",(0,r.kt)("inlineCode",{parentName:"p"},"pg")," package in your project using npm. To install it, run this command in your terminal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install pg\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"pg is a popular Node.js library used to work with Postgres. It serves as a PostgreSQL database driver for Node.js applications. To know more about pg, ",(0,r.kt)("a",{parentName:"p",href:"hhttps://node-postgres.com/"},"check their official documentation"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2")," - Initialise the ",(0,r.kt)("inlineCode",{parentName:"p"},"pg")," package in your Node.js script and get the Client from it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const { Client } = require('pg');\n")),(0,r.kt)("p",null,"Make sure you initialize the pg package at the top of program"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3")," - Create a PostgreSQL client object consisting of essential Postgres database credentials."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const client = new Client({\n  user: \u2018username',\n  password: 'password',\n  host: 'host',\n  port: \u2018port_number\u2019,\n  database: 'database_name',\n});\n")),(0,r.kt)("p",null,"Make sure to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"username"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"port_number"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"database_name")," with the actual credentials of your Postgres database"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4")," - Setup a connection with the database using the connect method with the manually created client object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client.connect()\n  .then(() => {\n    console.log('Connected to PostgreSQL database');\n  })\n  .catch((err) => {\n    console.error('Error connecting to PostgreSQL database', err);\n  });\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 5")," - Execute your desired SQL query to get the data. You can use the query method to run the SQL query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client.query('SELECT * FROM customers', (err, result) => {\n  if (err) {\n    console.error('Error executing query', err);\n  } else {\n    console.log('Query result:', result.rows);\n  }\n});\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 6")," - Close the connection after the whole work is done. Use the end method to close the connection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client.end()\n  .then(() => {\n    console.log('Connection to PostgreSQL closed');\n  })\n  .catch((err) => {\n    console.error('Error closing connection', err);\n  });\n")),(0,r.kt)("p",null,"Here\u2019s the complete code to connect to the Postgres database with Node.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const { Client } = require('pg');\n\n// Database connection configuration\nconst dbConfig = {\n  user: \u2018username',\n  password: 'password',\n  host: 'host',\n  port: \u2018port_number\u2019,\n  database: 'database_name',\n};\n\n// Create a new PostgreSQL client\nconst client = new Client(dbConfig);\n\n// Connect to the database\nclient.connect()\n  .then(() => {\n    console.log('Connected to PostgreSQL database');\n\n    // Execute SQL queries here\n\n    client.query('SELECT * FROM employees', (err, result) => {\n      if (err) {\n        console.error('Error executing query', err);\n      } else {\n        console.log('Query result:', result.rows);\n      }\n\n      // Close the connection when done\n      client.end()\n        .then(() => {\n          console.log('Connection to PostgreSQL closed');\n        })\n        .catch((err) => {\n          console.error('Error closing connection', err);\n        });\n    });\n  })\n  .catch((err) => {\n    console.error('Error connecting to PostgreSQL database', err);\n  });\n\n")),(0,r.kt)("p",null,"In this example, we have demonstrated how you can read the data, but you can also perform other operations of Posgtres database also like Insert, Update, and Create Table"),(0,r.kt)("h2",{id:"insert-statements"},(0,r.kt)("inlineCode",{parentName:"h2"},"Insert")," statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client.connect()\n  .then(() => {\n\n    const insert = 'INSERT INTO employees(column1, column2) VALUES (value1, value2)';\n    const values = ['value1', 'value2'];\n\n    client.query(insert, values, (err, result) => {\n      if (err) {\n        console.error('Error inserting data', err);\n      } else {\n        console.log('Data inserted successfully');\n      }\n\n      client.end();\n    });\n  })\n  .catch((err) => {\n    console.error('Error connecting to PostgreSQL database', err);\n  });\n")),(0,r.kt)("h2",{id:"update-statements"},(0,r.kt)("inlineCode",{parentName:"h2"},"Update")," statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const update = 'UPDATE employees SET column1 = value1 WHERE column2 = value2';\nconst values = ['updated_value', 'criteria_value'];\n\nclient.query(update, values, (err, result) => {\n  if (err) {\n    console.error('Error updating data', err);\n  } else {\n    console.log('Data updated successfully');\n  }\n\n  client.end();\n});\n\n")),(0,r.kt)("h2",{id:"ddl-statements-like-create-table"},"DDL statements like ",(0,r.kt)("inlineCode",{parentName:"h2"},"Create Table")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const createTable = `\n  CREATE TABLE employees(\n    id serial PRIMARY KEY,\n    column1 datatype1,\n    column2 datatype2\n  );\n`;\n\nclient.query(createTable, (err, result) => {\n  if (err) {\n    console.error('Error creating table', err);\n  } else {\n    console.log('Table created successfully');\n  }\n\n  client.end();\n});\n\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this guide, we discussed the step-by-step process to connect to the Postgres database with Node.js."),(0,r.kt)("p",null,"We highly suggest you to read our ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/docs/category/postgres-guides"},"guides to understand the multiple operations you can perform with the Postgres database")),(0,r.kt)("p",null,"Also, check our highly informative ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/blog"},"blog posts")," to learn about our useful extensions."))}d.isMDXComponent=!0}}]);