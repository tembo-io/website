"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7598],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},69097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:2e3,tags:["Terraform","Infrastructure as Code","Gitops","Database as Code"]},o="Tembo Terraform Provider",l={unversionedId:"tembo-cloud/terraform-provider",id:"tembo-cloud/terraform-provider",title:"Tembo Terraform Provider",description:"Tembo has a Terraform Provider that allows you to provision an Instance on the Tembo Cloud.",source:"@site/docs/tembo-cloud/terraform-provider.md",sourceDirName:"tembo-cloud",slug:"/tembo-cloud/terraform-provider",permalink:"/docs/tembo-cloud/terraform-provider",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/tembo-cloud/terraform-provider.md",tags:[{label:"Terraform",permalink:"/docs/tags/terraform"},{label:"Infrastructure as Code",permalink:"/docs/tags/infrastructure-as-code"},{label:"Gitops",permalink:"/docs/tags/gitops"},{label:"Database as Code",permalink:"/docs/tags/database-as-code"}],version:"current",sidebarPosition:2e3,frontMatter:{sidebar_position:2e3,tags:["Terraform","Infrastructure as Code","Gitops","Database as Code"]},sidebar:"tutorialSidebar",previous:{title:"Postgres Users",permalink:"/docs/tembo-cloud/postgres_users"},next:{title:"Tembo Stacks",permalink:"/docs/category/tembo-stacks"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"tembo_instance (Resource)",id:"tembo_instance-resource",level:2},{value:"Example Usage",id:"example-usage-1",level:3},{value:"Schema",id:"schema",level:3},{value:"Required",id:"required",level:4},{value:"Optional",id:"optional",level:4},{value:"Read-Only",id:"read-only",level:4},{value:"Nested Schema for <code>extensions</code>",id:"nested-schema-for-extensions",level:4},{value:"Nested Schema for <code>extensions.locations</code>",id:"nested-schema-for-extensionslocations",level:4},{value:"Nested Schema for <code>postgres_configs</code>",id:"nested-schema-for-postgres_configs",level:4},{value:"Nested Schema for <code>trunk_installs</code>",id:"nested-schema-for-trunk_installs",level:4}],d={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tembo-terraform-provider"},"Tembo Terraform Provider"),(0,r.kt)("p",null,"Tembo has a Terraform Provider that allows you to provision an Instance on the Tembo Cloud."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.terraform.io/downloads.html"},"Terraform")," >= 1.0")),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Tembo Terraform Provider needs an ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," to authenticate with the API. Generate a long-lived API token by following steps ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/docs/tembo-cloud/api#create-a-long-lived-api-token"},"here"),"."),(0,r.kt)("p",null,"Note: To set ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," either create a local ",(0,r.kt)("inlineCode",{parentName:"p"},".tfvars")," file with the variable or set an environment variable with the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export TEMBO_ACCESS_TOKEN="TOKEN_GOES_HERE"\n')),(0,r.kt)("h2",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-hcl"},'terraform {\n  required_providers {\n    tembo = {\n      source = "tembo-io/tembo"\n    }\n  }\n}\n\nprovider "tembo" {\n  access_token = var.access_token\n}\n\nvariable "access_token" {\n  type = string\n}\n')),(0,r.kt)("h2",{id:"tembo_instance-resource"},"tembo_instance (Resource)"),(0,r.kt)("p",null,"Resource for creating a tembo instance."),(0,r.kt)("h3",{id:"example-usage-1"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-terraform"},'resource "tembo_instance" "test_instance" {\n  instance_name = "test-instance"\n  org_id        = "org_test" # Replace this with your org_id\n  cpu           = "1"\n  stack_type    = "Standard"\n  environment   = "dev"\n  memory        = "4Gi"\n  storage       = "10Gi"\n  replicas      = 1\n  # extra_domains_rw = ["sample-invalid-domain.test.tembo-development.com"]\n  postgres_configs = [\n    {\n      name  = "max_connections"\n      value = "200"\n    },\n    {\n      name  = "wal_buffers"\n      value = "10"\n    }\n  ]\n  trunk_installs = [\n    {\n      name    = "pgmq"\n      version = "0.24.0"\n    }\n  ]\n  extensions = [{\n    name        = "plperl"\n    description = "PL/Perl procedural language"\n    locations = [{\n      database = "app"\n      schema   = "public"\n      version  = "1.0"\n      enabled  = false\n      },\n      {\n        database = "postgres"\n        schema   = "public"\n        version  = "1.0"\n        enabled  = true\n    }]\n    },\n    {\n      "name" : "pltclu",\n      "description" : "PL/TclU untrusted procedural language",\n      "locations" : [\n        {\n          "database" : "app",\n          "schema" : "public",\n          "version" : "1.0",\n          "enabled" : false,\n          "error" : false,\n          "error_message" : null\n        },\n        {\n          "database" : "postgres",\n          "schema" : "public",\n          "version" : "1.0",\n          "enabled" : false,\n          "error" : false,\n          "error_message" : null\n        }\n      ]\n  }]\n}\n\noutput "instance" {\n  value = tembo_instance.test_instance\n}\n')),(0,r.kt)("h3",{id:"schema"},"Schema"),(0,r.kt)("h4",{id:"required"},"Required"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cpu")," (String) CPU. Supported values: 1, 2, 4, 8, 16, 32"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"environment")," (String) Environment. Values supported: dev, test, prod"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"instance_name")," (String) Unique name of the instance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memory")," (String) Memory. Values supported: 1Gi, 2Gi, 4Gi, 8Gi, 16Gi, 32Gi"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"org_id")," (String) Id of the organization in which the instance will be created"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stack_type")," (String) Stack type for the instance. Supported values: Standard, MessageQueue, MachineLearning, OLAP, OLTP"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"storage")," (String) Storage. Values supported: 10Gi, 50Gi, 100Gi, 200Gi, 300Gi, 400Gi, 500Gi")),(0,r.kt)("h4",{id:"optional"},"Optional"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extensions")," (Attributes List) Extensions to install in the instance (see ",(0,r.kt)("a",{parentName:"li",href:"#nestedatt--extensions"},"below for nested schema"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extra_domains_rw")," (List of String) Custom domain. Read more ",(0,r.kt)("a",{parentName:"li",href:"https://tembo.io/docs/tembo-cloud/custom-domains/"},"here")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postgres_configs")," (Attributes List) Postgres config values (see ",(0,r.kt)("a",{parentName:"li",href:"#nestedatt--postgres_configs"},"below for nested schema"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replicas")," (Number) Instance replicas"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trunk_installs")," (Attributes List) Trunk installs (see ",(0,r.kt)("a",{parentName:"li",href:"#nestedatt--trunk_installs"},"below for nested schema"),")")),(0,r.kt)("h4",{id:"read-only"},"Read-Only"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"instance_id")," (String) Unique ID for the instance generated by Tembo"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last_updated")," (String) Last updated date time in UTC"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (String) Instance state. Values: Submitted, Up, Configuring, Error, Restarting, Starting, Stopping, Stopped, Deleting, Deleted")),(0,r.kt)("a",{id:"nestedatt--extensions"}),(0,r.kt)("h4",{id:"nested-schema-for-extensions"},"Nested Schema for ",(0,r.kt)("inlineCode",{parentName:"h4"},"extensions")),(0,r.kt)("p",null,"Required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locations")," (Attributes List) (see ",(0,r.kt)("a",{parentName:"li",href:"#nestedatt--extensions--locations"},"below for nested schema"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (String)")),(0,r.kt)("p",null,"Optional:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description")," (String)")),(0,r.kt)("a",{id:"nestedatt--extensions--locations"}),(0,r.kt)("h4",{id:"nested-schema-for-extensionslocations"},"Nested Schema for ",(0,r.kt)("inlineCode",{parentName:"h4"},"extensions.locations")),(0,r.kt)("p",null,"Required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"database")," (String)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enabled")," (Boolean)")),(0,r.kt)("p",null,"Optional:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"schema")," (String)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," (String)")),(0,r.kt)("a",{id:"nestedatt--postgres_configs"}),(0,r.kt)("h4",{id:"nested-schema-for-postgres_configs"},"Nested Schema for ",(0,r.kt)("inlineCode",{parentName:"h4"},"postgres_configs")),(0,r.kt)("p",null,"Required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (String)")),(0,r.kt)("p",null,"Optional:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," (String)")),(0,r.kt)("a",{id:"nestedatt--trunk_installs"}),(0,r.kt)("h4",{id:"nested-schema-for-trunk_installs"},"Nested Schema for ",(0,r.kt)("inlineCode",{parentName:"h4"},"trunk_installs")),(0,r.kt)("p",null,"Required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (String)")),(0,r.kt)("p",null,"Optional:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," (String)")))}u.isMDXComponent=!0}}]);