"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1778],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=r,d=m["".concat(p,".").concat(c)]||m[c]||g[c]||o;return n?a.createElement(d,s(s({ref:t},l),{},{components:n})):a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={slug:"pgmq-with-python",title:"Using pgmq with Python",authors:["rjzv"],tags:["postgres","pgmq","python"]},s=void 0,i={permalink:"/blog/pgmq-with-python",editUrl:"https://github.com/tembo-io/website/blob/main/blog/2023-08-24-pgmq_with_python/index.md",source:"@site/blog/2023-08-24-pgmq_with_python/index.md",title:"Using pgmq with Python",description:"In my recent search for something interesting to do with Rust, I discovered that people write postgres extensions using pgrx.",date:"2023-08-24T00:00:00.000Z",formattedDate:"August 24, 2023",tags:[{label:"postgres",permalink:"/blog/tags/postgres"},{label:"pgmq",permalink:"/blog/tags/pgmq"},{label:"python",permalink:"/blog/tags/python"}],readingTime:4.34,hasTruncateMarker:!1,authors:[{name:"Binidxaba",title:"Community contributor",url:"https://github.com/binidxaba",email:"noreply@tembo.io",imageURL:"https://github.com/binidxaba.png",key:"rjzv"}],frontMatter:{slug:"pgmq-with-python",title:"Using pgmq with Python",authors:["rjzv"],tags:["postgres","pgmq","python"]},prevItem:{title:"Optimizing Postgres's Autovacuum for High-Churn Tables",permalink:"/blog/optimizing-postgres-auto-vacuum"},nextItem:{title:"Introducing pg_later: Asynchronous Queries for Postgres, Inspired by Snowflake",permalink:"/blog/introducing-pg-later"}},p={authorsImageUrls:[void 0]},u=[{value:"Setting up the environment",id:"setting-up-the-environment",level:2},{value:"The PGMQueue class",id:"the-pgmqueue-class",level:2},{value:"Implementing a Producer",id:"implementing-a-producer",level:2},{value:"Implementing a Consumer",id:"implementing-a-consumer",level:2},{value:"Harnessing Producer and Consumer",id:"harnessing-producer-and-consumer",level:2},{value:"Some final words...",id:"some-final-words",level:2},{value:"Appendix",id:"appendix",level:2}],l={toc:u},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In my recent search for something interesting to do with Rust, I discovered that people write postgres extensions using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pgcentralfoundation/pgrx"},"pgrx"),"."),(0,r.kt)("p",null,"I found that very cool, and while looking for some real-world examples to study and dissect, I came across ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/blog/introducing-pgmq"},"pgmq"),': "A lightweight message queue. Like AWS SQS and RSMQ but on Postgres." So, I decided to give it a shot so that perhaps in the future, I can contribute to the project ;)'),(0,r.kt)("p",null,"When reviewing the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq"},"repository"),", I noticed a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq/tree/main/tembo-pgmq-python"},"Python client")," to interact with pgmq and began to play with it."),(0,r.kt)("p",null,"Let me quickly describe how easy it was for me to use it."),(0,r.kt)("h2",{id:"setting-up-the-environment"},"Setting up the environment"),(0,r.kt)("p",null,"The first step was to start Postgres with a docker container. You can check the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq"},"README")," for detailed instructions, but in summary, just run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"docker run -d --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 quay.io/tembo/pgmq-pg:latest\n")),(0,r.kt)("p",null,"A quick test to make sure that Postgres is running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"psql postgres://postgres:postgres@0.0.0.0:5432/postgres\n")),(0,r.kt)("p",null,"After that, I simply installed the pgmq Python client in my virtual environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"pip install tembo-pgmq-python\n")),(0,r.kt)("p",null,"That's all the setup that I needed."),(0,r.kt)("h2",{id:"the-pgmqueue-class"},"The PGMQueue class"),(0,r.kt)("p",null,"To use the library, we need to instantiate a PGMQueue object and from that object we can call the methods described in the following table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"SQL function"),(0,r.kt)("th",{parentName:"tr",align:null},"PGMQueue method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","create(queue)"),(0,r.kt)("td",{parentName:"tr",align:null},"create","_","queue(self, queue: str)"),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a new queue with the name queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","send(queue, message)"),(0,r.kt)("td",{parentName:"tr",align:null},"send(self, queue: str, message: dict, delay: Optional","[int]"," = None)"),(0,r.kt)("td",{parentName:"tr",align:null},"Appends a message to the queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","read(queue, vt, num","_","messages)"),(0,r.kt)("td",{parentName:"tr",align:null},"read(self, queue: str, vt: Optional","[int]"," = None)"),(0,r.kt)("td",{parentName:"tr",align:null},"Reads num","_","messages from queue and sets the visibility timeout to vt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","archive(queue, msg","_","id)"),(0,r.kt)("td",{parentName:"tr",align:null},"archive(self, queue: str, msg","_","id: int)"),(0,r.kt)("td",{parentName:"tr",align:null},"Archives the message with msg","_","id.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","pop(queue)"),(0,r.kt)("td",{parentName:"tr",align:null},"pop(self, queue: str)"),(0,r.kt)("td",{parentName:"tr",align:null},"Pop the next message in the queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","delete(queue, msg","_","id)"),(0,r.kt)("td",{parentName:"tr",align:null},"delete(self, queue: str, msg","_","id: int)"),(0,r.kt)("td",{parentName:"tr",align:null},"Deletes the message with msg","_","id from the queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pgmq","_","drop","_","queue(queue)"),(0,r.kt)("td",{parentName:"tr",align:null},"Not available yet"),(0,r.kt)("td",{parentName:"tr",align:null},"Drops the queue.")))),(0,r.kt)("p",null,"Next, let me show you how to implement a simple producer/consumer setup using the methods above."),(0,r.kt)("h2",{id:"implementing-a-producer"},"Implementing a Producer"),(0,r.kt)("p",null,"In summary, the required steps are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Import the Messages and PGMQueue classes."),(0,r.kt)("li",{parentName:"ol"},"Instantiate a PGMQueue object."),(0,r.kt)("li",{parentName:"ol"},"Create a queue."),(0,r.kt)("li",{parentName:"ol"},"Send N messages via the queue in a loop.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from tembo_pgmq_python import Message, PGMQueue\n\nqueue = PGMQueue(**connection_info)\nqueue.create_queue(test_queue)\n...\n\nfor x in range(num_messages):\n    ...\n    msg_id = queue.send(test_queue, test_message)\n    ...\n")),(0,r.kt)("p",null,"The PGMQueue constructor is the one that receives the connection information. For the Postgres instance initiated by the docker container, the connection details are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'queue = PGMQueue(host="localhost",\n                port=5432,\n                username="postgres",\n                password="postgres",\n                database="postgres")\n')),(0,r.kt)("h2",{id:"implementing-a-consumer"},"Implementing a Consumer"),(0,r.kt)("p",null,"In short, the code should basically do:\nImport the Messages and PGMQueue classes.\nConsume the messages from the queue in a loop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from tembo_pgmq_python import Message, PGMQueue\n\n...\nqueue = PGMQueue(**connection_info)\n...\n\nwhile True:\n    ...\n    message: Message = queue.pop(queue_name)\n    ...\n")),(0,r.kt)("h2",{id:"harnessing-producer-and-consumer"},"Harnessing Producer and Consumer"),(0,r.kt)("p",null,"For simplicity, I used a simple shell script to initiate my experiment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"#/bin/bash\n\n# Spawn one producer\npython3 producer.py > /tmp/producer.out &\nsleep 2\n\n\n# Spawn 5 consumers\nfor i in $(seq 1 5)\ndo\n  python3 consumer.py > /tmp/consumer_${i}.out &\ndone\n\n# Wait for everyone to finish\nwait\n")),(0,r.kt)("p",null,"The script basically starts 1 producer and 5 consumers in the background. The output is saved in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/tmp")," directory."),(0,r.kt)("p",null,"And that was it..."),(0,r.kt)("p",null,"From this point, you can explore the other available methods."),(0,r.kt)("h2",{id:"some-final-words"},"Some final words..."),(0,r.kt)("p",null,"It was a pleasant surprise how easy it was to create this example: only a couple of shell commands and a couple of short Python scripts. The PGMQueue methods were very intuitive and straightforward. Personally, my next step is to understand how it works internally. But that's a topic for the future :)"),(0,r.kt)("p",null,"I invite everyone to explore this project at: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq"},"https://github.com/tembo-io/pgmq"),". Give it a star and also check out the other available clients for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq/tree/main/core"},"Rust")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/craigpastro/pgmq-go"},"Go"),"."),(0,r.kt)("h2",{id:"appendix"},"Appendix"),(0,r.kt)("p",null,"Here is the complete code if you want to give it a try (or see it in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/binidxaba/pgmq-with-python"},"this repository"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'"""\nThis is the Producer\'s code\n"""\n\nimport random\nimport string\nfrom tembo_pgmq_python import Message, PGMQueue\n\n\nif __name__ == \'__main__\':\n    host = "localhost"\n    port = 5432\n    username = "postgres"\n    password = "postgres"\n    database = "postgres"\n\n    num_messages = 100000\n    test_queue = "bench_queue_sample"\n\n    queue = PGMQueue(host=host,\n                    port=port,\n                    username=username,\n                    password=password,\n                    database=database)\n\n    try:\n        #queue.drop_queue(test_queue)\n        queue.create_queue(test_queue)\n\n        for x in range(num_messages):\n\n            payload = \'\'.join(random.choices(string.ascii_uppercase + string.digits, k = 10))\n            msg = {"payload": payload}\n            msg_id = queue.send(test_queue, msg)\n\n            if (x+1) % 1000 == 0:\n                print("Sent {} messages".format(x + 1))\n\n    except Exception as e:\n        print(f"{e}")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'"""\nThis is the Consumer\'s code\n"""\n\nimport random\nimport time\nfrom tembo_pgmq_python import Message, PGMQueue\n\n\nif __name__ == \'__main__\':\n    host = "localhost"\n    port = 5432\n    username = "postgres"\n    password = "postgres"\n    database = "postgres"\n\n    no_message_timeout = 0\n    test_queue = "bench_queue_sample"\n\n    queue = PGMQueue(host=host, port=port, username=username, password=password, database=database)\n\n    while no_message_timeout < 5:\n        try:\n            message: Message = queue.pop(test_queue)  # type: ignore\n            print("Consumed message: {}".format(message.message["payload"]))\n            no_message_timeout = 0\n\n        except IndexError:\n            no_message_timeout += 1\n            print("No more messages for {no_message_timeout} consecutive reads")\n            time.sleep(0.500)\n\n')))}g.isMDXComponent=!0}}]);