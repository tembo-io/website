"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8115],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var u=n.createContext({}),i=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=i(a),d=s,h=m["".concat(u,".").concat(d)]||m[d]||c[d]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[m]="string"==typeof e?e:s,l[1]=o;for(var i=2;i<r;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),s=a(86010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,l),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(87462),s=a(67294),r=a(86010),l=a(12466),o=a(16550),u=a(91980),i=a(67392),p=a(50012);function m(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:s}}=e;return{value:t,label:a,attributes:n,default:s}}))}function c(e){const{values:t,children:a}=e;return(0,s.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=c(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[u,i]=h({queryString:a,groupId:n}),[m,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,p.Nk)(a);return[n,(0,s.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),b=(()=>{const e=u??m;return d({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),i(e),g(e)}),[i,g,r]),tabValues:r}}var b=a(72389);const T={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:a,selectedValue:o,selectValue:u,tabValues:i}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),c=e=>{const t=e.currentTarget,a=p.indexOf(t),n=i[a].value;n!==o&&(m(t),u(n))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},i.map((e=>{let{value:t,label:a,attributes:l}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:c},l,{className:(0,r.Z)("tabs__item",T.tabItem,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function f(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=g(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",T.tabList)},s.createElement(k,(0,n.Z)({},e,t)),s.createElement(f,(0,n.Z)({},e,t)))}function v(e){const t=(0,b.Z)();return s.createElement(y,(0,n.Z)({key:String(t)},e))}},33758:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=a(87462),s=(a(67294),a(3905)),r=a(74866),l=a(85162);const o={sidebar_position:6},u="Tembo Message Queue",i={unversionedId:"tembo-stacks/message-queue",id:"tembo-stacks/message-queue",title:"Tembo Message Queue",description:"Message queues let you send, read, and retain messages between applications without data loss or requiring all systems in a distributed system to be available. The MQ Stack is powered by PGMQ, a Postgres extension built and maintained by Tembo that provides a simple and consistent interface for creating queues and sending, receiving, deleting and archiving messages.",source:"@site/docs/tembo-stacks/message-queue.md",sourceDirName:"tembo-stacks",slug:"/tembo-stacks/message-queue",permalink:"/docs/tembo-stacks/message-queue",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/tembo-stacks/message-queue.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Tembo Enterprise LLM",permalink:"/docs/tembo-stacks/enterprise-llm"},next:{title:"Tembo Stacks Roadmap",permalink:"/docs/tembo-stacks/roadmap"}},p={},m=[{value:"SQL API",id:"sql-api",level:2},{value:"REST API",id:"rest-api",level:2},{value:"Create a Queue",id:"create-a-queue",level:3},{value:"List Queues",id:"list-queues",level:3},{value:"Send a Message",id:"send-a-message",level:3},{value:"Send a Batch of Messages",id:"send-a-batch-of-messages",level:3},{value:"Read Messages",id:"read-messages",level:3},{value:"Archive a Single Message",id:"archive-a-single-message",level:3},{value:"Archive a Batch of Messages",id:"archive-a-batch-of-messages",level:3},{value:"Delete a Message",id:"delete-a-message",level:3},{value:"Delete a batch of Messages",id:"delete-a-batch-of-messages",level:3}],c={toc:m},d="wrapper";function h(e){let{components:t,...a}=e;return(0,s.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"tembo-message-queue"},"Tembo Message Queue"),(0,s.kt)("p",null,"Message queues let you send, read, and retain messages between applications without data loss or requiring all systems in a distributed system to be available. The MQ Stack is powered by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq#sql-examples"},"PGMQ"),", a Postgres extension built and maintained by Tembo that provides a simple and consistent interface for creating queues and sending, receiving, deleting and archiving messages."),(0,s.kt)("p",null,"Tembo optimized this Postgres instance for Message queue workloads by tuning the Postgres configuration, implementing aggressive ",(0,s.kt)("a",{parentName:"p",href:"https://postgresqlco.nf/doc/en/param/autovacuum/"},"autovacuum")," configurations, installing the PGMQ extension, and creating a default database and user. The Message Queue Stack is a great way to get started with PGMQ and Postgres."),(0,s.kt)("h2",{id:"sql-api"},"SQL API"),(0,s.kt)("p",null,"For users familiar with Postgres, you can interact with your queues using SQL. The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tembo-io/pgmq"},"PGMQ")," extension comes pre-installed in the Tembo Message Queue Stack."),(0,s.kt)("p",null,"Please refer to the ",(0,s.kt)("a",{parentName:"p",href:"https://tembo-io.github.io/pgmq/api/sql/functions/"},"PGMQ API documentation")," for a guide on getting started with PGMQ."),(0,s.kt)("h2",{id:"rest-api"},"REST API"),(0,s.kt)("p",null,"Tembo cloud provides an HTTP interface to your Message Queue Stack which allows you to interact with your queues without SQL."),(0,s.kt)("p",null,"First, you'll need to gather some information from your Tembo instance. You'll need:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Tembo Data Domain -  this is the same value as the host of your Tembo Postgres instance. For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"org-acme-inst-my-first-database.data-1.use1.tembo.io"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Tembo API Token - you can ",(0,s.kt)("a",{parentName:"p",href:"https://cloud.tembo.io/generate-jwt"},"generate a new API token")," on the ",(0,s.kt)("a",{parentName:"p",href:"https://cloud.tembo.io/generate-jwt"},"Tembo Cloud Platform")))),(0,s.kt)("p",null,"Export these two values as environment variables:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'export TEMBO_DATA_DOMAIN="your-data-domain"\nexport TEMBO_TOKEN="your-token"\n')),(0,s.kt)("p",null,"All of PGMQ's ",(0,s.kt)("a",{parentName:"p",href:"https://tembo-io.github.io/pgmq/api/sql/functions/"},"API functions")," are available via the REST API.\nThe functions can be reached at ",(0,s.kt)("inlineCode",{parentName:"p"},"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/<function_name>")," and parameters passed as JSON in the request body."),(0,s.kt)("p",null,"We'll walk through the major functionality of the HTTP interface below."),(0,s.kt)("h3",{id:"create-a-queue"},"Create a Queue"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'import requests\n\nTEMBO_DATA_DOMAIN = os.environ["TEMBO_DATA_DOMAIN"]\nTEMBO_TOKEN = os.environ["TEMBO_TOKEN"]\n\nresp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/create",\n    json={\n        "queue_name": "my_demo",\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nprint(resp.status_code)\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo"}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/create"\n')))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"list-queues"},"List Queues"),(0,s.kt)("p",null,"List all the queues currently in the database."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/list_queues",\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nprint(resp.status_code)\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/list_queues"\n')))),(0,s.kt)("p",null,"The existing queues will be returned in the response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "queue_name": "my_demo",\n    "created_at": "2023-11-02T14:31:06.130805+00:00",\n    "is_partitioned": false,\n    "is_unlogged": false\n  }\n]\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"send-a-message"},"Send a Message"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/send",\n    json={\n        "queue_name": "my_demo",\n        "msg": {"hello": "world-0"},\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msg": {"hello": "world-0"}}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/send"\n')))),(0,s.kt)("p",null,"The message ID is returned from the request."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"[\n    1\n]\n")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"send-a-batch-of-messages"},"Send a Batch of Messages"),(0,s.kt)("p",null,"To send multiple messages in a single request, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"send_batch")," endpoint.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"msg")," parameter becomes ",(0,s.kt)("inlineCode",{parentName:"p"},"msgs"),", and accepts a list or array of json messages."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/send_batch",\n    json={\n        "queue_name": "my_demo",\n        "msgs": [\n          {"hello": "world-1"},\n          {"hello": "world-2"},\n          {"hello": "world-3"},\n          {"hello": "world-4"},\n          {"hello": "world-5"},\n        ],\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msgs": [{"hello": "world-1"}, {"hello": "world-02"}, {"hello": "world-03"}, {"hello": "world-04"}, {"hello": "world-05"}]}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/send_batch"\n')))),(0,s.kt)("p",null,"The message IDs for all messages are returned in an array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"[\n  2,\n  3,\n  4,\n  5,\n  6\n]\n")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"read-messages"},"Read Messages"),(0,s.kt)("p",null,"Read one or many message from the queue. Set the visibility timeout to 30 seconds, which will prevent all consumers from reading that message again for 30 seconds. Specify the number of messages you want to read with ",(0,s.kt)("inlineCode",{parentName:"p"},"qty"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/read",\n    json={\n        "queue_name": "my_demo",\n        "vt": 30,\n        "qty": 1\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n')),(0,s.kt)("hr",null)),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "vt": 30, "qty": 1}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/read"\n')))),(0,s.kt)("p",null,"The messages are returned in an array. The message response also tells us how many times the message has been read (",(0,s.kt)("inlineCode",{parentName:"p"},"read_ct"),"), and when the message first reached the queue (",(0,s.kt)("inlineCode",{parentName:"p"},"enqueued_at"),")."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "msg_id": 1,\n    "read_ct": 1,\n    "enqueued_at": "2023-11-02T15:00:39.396488+00:00",\n    "vt": "2023-11-02T15:05:26.352591+00:00",\n    "message": {\n      "hello": "world-0"\n    }\n  }\n]\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"archive-a-single-message"},"Archive a Single Message"),(0,s.kt)("p",null,"Archiving a message will remove it from the queue, but it will still be available to be viewed via SQL on the queue's archive table."),(0,s.kt)("p",null,"Archive messages by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"queue_name")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"msg_id"),". We'll archive the message with ID=1."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/archive",\n    json={\n        "queue_name": "my_demo",\n        "msg_id": 1,\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msg_id": 1}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/archive"\n')))),(0,s.kt)("p",null,"Single message archive returned a boolean indicating the success or failure of the operation. If the message does not exist it will return ",(0,s.kt)("inlineCode",{parentName:"p"},"False"),", otherwise it is ",(0,s.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"true\n")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"archive-a-batch-of-messages"},"Archive a Batch of Messages"),(0,s.kt)("p",null,"Same rules apply to batch archive as single message archive. However, you simple pass an array of ",(0,s.kt)("inlineCode",{parentName:"p"},"msg_ids")," to instead of a single ",(0,s.kt)("inlineCode",{parentName:"p"},"msg_id"),". "),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/archive",\n    json={\n        "queue_name": "my_demo",\n        "msg_ids": [2, 3],\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msg_ids": [2, 3]}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/archive"\n')))),(0,s.kt)("p",null,"The response will show which message IDs were successfully archived. If a message ID does not exist then it's ID will not be returned."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"[\n  2,\n  3\n]\n")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"delete-a-message"},"Delete a Message"),(0,s.kt)("p",null,"Deleting messages removing them completely from the system. Specify the queue name and the message ID that you want to delete.\nIf the message does not exist it will return ",(0,s.kt)("inlineCode",{parentName:"p"},"False"),", otherwise it is ",(0,s.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/delete",\n    json={\n        "queue_name": "my_demo",\n        "msg_id": 4,\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msg_id": 4}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/archive"\n')))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"true\n")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"delete-a-batch-of-messages"},"Delete a batch of Messages"),(0,s.kt)("p",null,"You can delete several messages in one HTTP request similar to a single message request. Simply pass an array of ",(0,s.kt)("inlineCode",{parentName:"p"},"msg_ids")," instead of a single ",(0,s.kt)("inlineCode",{parentName:"p"},"msg_id"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'resp = requests.post(\n    url=f"https://{TEMBO_DATA_DOMAIN}/pgmq/v1/delete",\n    json={\n        "queue_name": "my_demo",\n        "msg_ids": [5, 6],\n    },\n    headers={"Authorization": f"Bearer {TEMBO_TOKEN}"},\n)\nresp.json()\n'))),(0,s.kt)(l.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Bearer ${TEMBO_TOKEN}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"queue_name": "my_demo", "msg_ids": [5, 6]}\' \\\n  "https://${TEMBO_DATA_DOMAIN}/pgmq/v1/archive"\n')))),(0,s.kt)("p",null,"The response will show which message IDs were successfully deleted. If a message ID does not exist then it's ID will not be returned."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"[\n  5,\n  6\n]\n")))}h.isMDXComponent=!0}}]);