"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=s(n),y=r,b=l["".concat(p,".").concat(y)]||l[y]||m[y]||a;return n?o.createElement(b,c(c({ref:t},u),{},{components:n})):o.createElement(b,c({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[l]="string"==typeof e?e:r,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},50158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},c=void 0,i={unversionedId:"connecting-to-tembo/python",id:"connecting-to-tembo/python",title:"python",description:"It\u2019s important to use psycopg2-binary version 2.9 or greater.",source:"@site/docs/connecting-to-tembo/python.md",sourceDirName:"connecting-to-tembo",slug:"/connecting-to-tembo/python",permalink:"/docs/connecting-to-tembo/python",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/connecting-to-tembo/python.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nodejs",permalink:"/docs/connecting-to-tembo/nodejs"}},p={},s=[{value:"Support and Community",id:"support-and-community",level:2}],u={toc:s},l="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"It\u2019s important to use ",(0,r.kt)("inlineCode",{parentName:"p"},"psycopg2-binary")," version 2.9 or greater."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pip install psycopg2-binary==2.9\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"main.py")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import psycopg2\n\ndef main():\n    # Connection string\n    conn_str = \'postgresql://postgres:******@your-subdomain-here.data-1.use1.tembo.io:5432?sslmode=require\'\n    \n    try:\n        # Create a new database session\n        conn = psycopg2.connect(conn_str)\n    except Exception as e:\n        print(f"Unable to connect to the database: {e}")\n\n    try:\n        # Create a new cursor object.\n        cur = conn.cursor()\n\n        # Test Query\n        cur.execute("SELECT 1")\n\n        # Fetch result\n        output = cur.fetchone()[0]\n        print(output)\n    except Exception as e:\n        print(f"An error occurred: {e}")\n    finally:\n        # Close communication with the database\n        cur.close()\n        conn.close()\n\nif __name__ == "__main__":\n    main()\n')),(0,r.kt)("h2",{id:"support-and-community"},"Support and Community"),(0,r.kt)("p",null,"If you encounter any issues, please check out our ",(0,r.kt)("a",{parentName:"p",href:"https://tembo.io/docs/tembo-cloud/troubleshooting"},"troubleshooting guide")," or contact ",(0,r.kt)("a",{parentName:"p",href:"mailto:support@tembo.io"},"support@tembo.io"),".  "),(0,r.kt)("p",null,"You're also welcome to join our ",(0,r.kt)("a",{parentName:"p",href:"https://join.slack.com/t/tembocommunity/shared_invite/zt-23o25qt91-AnZoC1jhLMLubwia4GeNGw"},"Tembo Community")," to meet and collaborate with other Tembo users."))}m.isMDXComponent=!0}}]);