"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4621],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>m});var s=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,s)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,s,n=function(e,t){if(null==e)return{};var o,s,n={},l=Object.keys(e);for(s=0;s<l.length;s++)o=l[s],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)o=l[s],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var r=s.createContext({}),p=function(e){var t=s.useContext(r),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=p(e.components);return s.createElement(r.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(o),h=n,m=d["".concat(r,".").concat(h)]||d[h]||u[h]||l;return o?s.createElement(m,a(a({ref:t},c),{},{components:o})):s.createElement(m,a({ref:t},c))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=h;var i={};for(var r in t)hasOwnProperty.call(t,r)&&(i[r]=t[r]);i.originalType=e,i[d]="string"==typeof e?e:n,a[1]=i;for(var p=2;p<l;p++)a[p]=o[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,o)}h.displayName="MDXCreateElement"},30928:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>v,contentTitle:()=>j,default:()=>J,frontMatter:()=>y,metadata:()=>O,toc:()=>N});var s=o(87462),n=(o(67294),o(3905));const l=o.p+"assets/images/inner-join-531c00fb5bebdcf4acb429161e1aa4c2.png",a=o.p+"assets/images/left-join-6c83c66bbc2285f5893cbfb8ad0c08e9.png",i=o.p+"assets/images/right-join-4bb2b5925d8e40efd41697366bdf5f62.png",r=o.p+"assets/images/full-outer-join-f9935dda5e8cd7a456e7a2b08df57886.png",p=o.p+"assets/images/cross-join-893ae4de2385ea54aae75d696e135c8b.png",c=o.p+"assets/images/inner-join-tables-67b11f32e92a2c7bb7006a25abf239b9.png",d=o.p+"assets/images/left-join-tables-f7e71c04a518b4afc3b4656275c1c9da.png",u=o.p+"assets/images/self-join-table-cbe8969957ccb5dabdd0cf499ec6c3cd.png",h=o.p+"assets/images/cross-join-tables-5df00bd895e9aae667c7a1bd015aaec1.png",m=o.p+"assets/images/inner-join-table-results-7486897ca39bfde958231cebb4b8b5d6.png",g=o.p+"assets/images/left-join-table-results-3f03b139378d762d851095590752f728.png",f=o.p+"assets/images/right-join-table-results-f273ec327b3fee5f6ef06485264cfb89.png",b=o.p+"assets/images/full-outer-join-table-results-8adbe9ad28d46ff56c9560a08e70fb70.png",w=o.p+"assets/images/cross-join-table-results-187fc85f7f420e345a362428668f697e.png",k=o.p+"assets/images/self-join-table-results-8f7d6e0a3a4f1733cfd62de020f3e694.png",y={sidebar_position:2,tags:["Postgres Basics"]},j="All possible joins in Postgres (Inner, Outer, Left, Right, etc)",O={unversionedId:"postgres_guides/all-possible-joins-in-postgres/all-possible-joins-in-postgres",id:"postgres_guides/all-possible-joins-in-postgres/all-possible-joins-in-postgres",title:"All possible joins in Postgres (Inner, Outer, Left, Right, etc)",description:"Postgres offers a collection of useful Join methods that a user can perform to extract the logical relationships in their data. In this guide, we will discuss 6 Join methods - Inner Join, Left Join, Right Join, Full Outer Join, Cross Join, and Self Join.",source:"@site/docs/postgres_guides/all-possible-joins-in-postgres/all-possible-joins-in-postgres.md",sourceDirName:"postgres_guides/all-possible-joins-in-postgres",slug:"/postgres_guides/all-possible-joins-in-postgres/",permalink:"/docs/postgres_guides/all-possible-joins-in-postgres/",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/postgres_guides/all-possible-joins-in-postgres/all-possible-joins-in-postgres.md",tags:[{label:"Postgres Basics",permalink:"/docs/tags/postgres-basics"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Postgres Basics"]},sidebar:"tutorialSidebar",previous:{title:"Postgres Guides",permalink:"/docs/category/postgres-guides"},next:{title:"Connecting to Postgres with C-sharp",permalink:"/docs/postgres_guides/connecting-to-postgres-with-c-sharp/"}},v={},N=[{value:"Inner Join",id:"inner-join",level:2},{value:"Example",id:"example",level:3},{value:"Left Join",id:"left-join",level:2},{value:"Example",id:"example-1",level:3},{value:"Right Join",id:"right-join",level:2},{value:"Example",id:"example-2",level:3},{value:"Full Outer Join",id:"full-outer-join",level:2},{value:"Example",id:"example-3",level:3},{value:"Cross Join",id:"cross-join",level:2},{value:"Example",id:"example-4",level:3},{value:"Self Join",id:"self-join",level:2},{value:"Example",id:"example-5",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Appendix",id:"appendix",level:2}],E={toc:N},_="wrapper";function J(e){let{components:t,...y}=e;return(0,n.kt)(_,(0,s.Z)({},E,y,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"all-possible-joins-in-postgres-inner-outer-left-right-etc"},"All possible joins in Postgres (Inner, Outer, Left, Right, etc)"),(0,n.kt)("p",null,"Postgres offers a collection of useful Join methods that a user can perform to extract the logical relationships in their data. In this guide, we will discuss 6 Join methods - Inner Join, Left Join, Right Join, Full Outer Join, Cross Join, and Self Join."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Do connect your terminal with your desired Postgres database to try out every join in Postgres. Follow our guide to see the whole process, ",(0,n.kt)("a",{parentName:"p",href:"https://tembo.io/docs/postgres_guides/how-to-connect-to-postgres/"},"click here"),".")),(0,n.kt)("p",null,"Now, let\u2019s discuss each join with the help of examples where we can see a use case for them."),(0,n.kt)("h2",{id:"inner-join"},"Inner Join"),(0,n.kt)("p",null,"It returns rows from both tables where there is a match followed by a specified join condition. produces only the set of records that match in both Table A and Table B."),(0,n.kt)("img",{src:l,width:"400",height:"100",alt:"inner-join-tables"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;\n")),(0,n.kt)("p",null,"Make sure to replace ",(0,n.kt)("inlineCode",{parentName:"p"},"table1")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"table2")," with the names of your tables in command."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"Suppose there are two tables - customers and orders:"),(0,n.kt)("img",{src:c,width:"800",height:"100",alt:"inner-join-tables"}),(0,n.kt)("p",null,"We want the list of customers who have placed an order. To do that, we will use ",(0,n.kt)("inlineCode",{parentName:"p"},"Inner Join"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT o.order_id, c.first_name, c.last_name, o.order_date\nFROM orders o\nINNER JOIN customers c ON o.customer_id = c.customer_id;\n")),(0,n.kt)("img",{src:m,width:"700",height:"100",alt:"inner-join-table-results"}),(0,n.kt)("h2",{id:"left-join"},"Left Join"),(0,n.kt)("p",null,"It return all rows from left table and maching rows from the right table. Null values will be returned for the right table if there are no matching rows."),(0,n.kt)("p",null,"It produces a complete set of records from Table A, with the matching records in Table B. If there is no match, the right side will contain null."),(0,n.kt)("img",{src:a,width:"400",height:"100",alt:"left-join"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;\n")),(0,n.kt)("h3",{id:"example-1"},"Example"),(0,n.kt)("p",null,"Suppose there are two tables - employees and projects"),(0,n.kt)("img",{src:d,width:"800",height:"100",alt:"left-join-tables"}),(0,n.kt)("p",null,"and we want to get the list of all employees with the project they are assigned to, even if they haven\u2019t been assigned any project. To do that, we will use ",(0,n.kt)("inlineCode",{parentName:"p"},"Left Join"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT employees.employee_id, employees.employee_name, projects.project_name\nFROM employees\nLEFT JOIN projects ON employees.employee_id = projects.employee_id;\n")),(0,n.kt)("img",{src:g,width:"800",height:"100",alt:"left-join-table-results"}),(0,n.kt)("h2",{id:"right-join"},"Right Join"),(0,n.kt)("p",null,"It return all rows from right table and maching rows from the left table. Null values will be returned for the left table if there are no matching rows."),(0,n.kt)("p",null,"It produces a complete set of records from Table B, with the matching records in Table A. If there is no match, the left side will contain null."),(0,n.kt)("img",{src:i,width:"400",height:"100",alt:"right-join"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;\n")),(0,n.kt)("h3",{id:"example-2"},"Example"),(0,n.kt)("p",null,"Now, suppose we want to get the list of all projects with the employees they are assigned to, even if no employee has been assigned to that project. For that, we can use Right Join:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT employees.employee_id, employees.employee_name, projects.project_name\nFROM employees\nRIGHT JOIN projects ON employees.employee_id = projects.employee_id;\n")),(0,n.kt)("img",{src:f,width:"800",height:"100",alt:"right-join-tables-results"}),(0,n.kt)("h2",{id:"full-outer-join"},"Full Outer Join"),(0,n.kt)("p",null,"It returns all the rows where there is match in both the left and the right table. Null values are returned for the columns where there is not any match."),(0,n.kt)("p",null,"It produces the set of all records in Table A and Table B, with matching records from both sides where available. If there is no match, the missing side will contain null."),(0,n.kt)("img",{src:r,width:"400",height:"100",alt:"full-outer-join"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;\n")),(0,n.kt)("h3",{id:"example-3"},"Example"),(0,n.kt)("p",null,"Supppose, now we want to see the full list of employees and projects along with the employees that does not have any projects assigned and projects that are not assigned to any employees. In such case, we can use Full Outer Join:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT e.employee_id, e.employee_name, p.project_name\nFROM employees e\nFULL OUTER JOIN projects p\nON e.employee_id = p.employee_id;\n")),(0,n.kt)("img",{src:b,width:"700",height:"100",alt:"full-outer-join-tables-results"}),(0,n.kt)("h2",{id:"cross-join"},"Cross Join"),(0,n.kt)("p",null,"It returns the result of Cartersian multiplication between the both tables. It combines the every row of left table to the every row of right table and gives the final result."),(0,n.kt)("p",null,"It does not require any condition."),(0,n.kt)("img",{src:p,width:"400",height:"100",alt:"cross-join"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table1 CROSS JOIN table2;\n")),(0,n.kt)("h3",{id:"example-4"},"Example"),(0,n.kt)("p",null,"Suppose there are two tables - boys and girls:"),(0,n.kt)("img",{src:h,width:"700",height:"100",alt:"cross-join-tables"}),(0,n.kt)("p",null,"For a prom night, we want to see how many couples can be formed by this list of boys and girls. For that, we can use Cross Join:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM boys CROSS JOIN girls;\n")),(0,n.kt)("img",{src:w,width:"500",height:"100",alt:"left-join-table-results"}),(0,n.kt)("h2",{id:"self-join"},"Self Join"),(0,n.kt)("p",null,"It joins the table with itself and returns the final output. Self joins is commonly used to compare rows within the same table."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT * FROM table_alias_1 JOIN table_alias_2 ON table_alias_1.column_1 = table_alias_2.column_2;\n")),(0,n.kt)("h3",{id:"example-5"},"Example"),(0,n.kt)("p",null,"Suppose there is a table employees consisting of employee id, employee names and their manager id:"),(0,n.kt)("img",{src:u,width:"400",height:"100",alt:"self-join-tables"}),(0,n.kt)("p",null,"We want to get the list of staff along with the name of their respective managers. We can get the manager name by matching the manager_id with the corresponding staff_id. To do that, we will use Self Join:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECT s.staff_name AS staffs, m.staff_name AS manager\nFROM staff s\nLEFT JOIN staff m ON s.manager_id = m.staff_id;\n")),(0,n.kt)("img",{src:k,width:"700",height:"100",alt:"self-join-table-results"}),(0,n.kt)("h2",{id:"conclusion"},"Conclusion"),(0,n.kt)("p",null,"In this guide, we covered all types of Join methods that a user can perform on data stored in tabular format."),(0,n.kt)("p",null,"To learn more about Postgres, we encourage you to explore our ",(0,n.kt)("a",{parentName:"p",href:"https://tembo.io/blog"},"blog posts"),"."),(0,n.kt)("p",null,"You can check out our ",(0,n.kt)("a",{parentName:"p",href:"https://tembo.io/docs/category/postgres-guides"},"guides page")," to know more about basic operations you can perform on Postgres."),(0,n.kt)("h2",{id:"appendix"},"Appendix"),(0,n.kt)("p",null,"Here is ",(0,n.kt)("a",{target:"_blank",href:o(87311).Z},"a SQL file")," that replicates the data used in this guide so you can try the joins yourself. You can simply download the attached SQL file and load it into your database to try out the various Join methods."))}J.isMDXComponent=!0},87311:(e,t,o)=>{o.d(t,{Z:()=>s});const s=o.p+"assets/files/database_data-d930c688356f42251385097b3a250c36.sql"}}]);