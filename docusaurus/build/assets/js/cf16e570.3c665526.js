"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4151],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),g=s,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||o;return a?n.createElement(m,r(r({ref:t},d),{},{components:a})):n.createElement(m,r({ref:t},d))}));function m(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,r=new Array(o);r[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:s,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},50660:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>g,default:()=>y,frontMatter:()=>u,metadata:()=>m,toc:()=>k});var n=a(87462),s=(a(67294),a(3905));const o=a.p+"assets/images/displaying-data-c67881b9447a05fb2f075ea23912f707.png",r=a.p+"assets/images/operator-1-a517a29cb66214db5e58198cce3f805b.png",i=a.p+"assets/images/operator-2-3ff9ba25f7dc15a426f5b11a863a14b3.png",l=a.p+"assets/images/where-clause-163c62a75929c72ef2be6f107308b105.png",p=a.p+"assets/images/json_each-7fd1c52115d73b573b700c7d51a36baa.png",d=a.p+"assets/images/update-1efa5b79b8bf7ebb98b3eb27ea2a97fa.png",c=a.p+"assets/images/nested-a65877343706cb9511ed641fd420a899.png",u={sidebar_position:2,tags:["Postgres Basics"]},g="Working with JSON Data in Postgres",m={unversionedId:"postgres_guides/working-with-json-data-in-postgres/working-with-json-data-in-postgres",id:"postgres_guides/working-with-json-data-in-postgres/working-with-json-data-in-postgres",title:"Working with JSON Data in Postgres",description:"JSON (JavaScript Object Notation) is a compact format designed for the storage and sharing of data. Postgres allows the users to use JSON as a data type to store and fetch data.",source:"@site/docs/postgres_guides/working-with-json-data-in-postgres/working-with-json-data-in-postgres.md",sourceDirName:"postgres_guides/working-with-json-data-in-postgres",slug:"/postgres_guides/working-with-json-data-in-postgres/",permalink:"/docs/postgres_guides/working-with-json-data-in-postgres/",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/postgres_guides/working-with-json-data-in-postgres/working-with-json-data-in-postgres.md",tags:[{label:"Postgres Basics",permalink:"/docs/tags/postgres-basics"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Postgres Basics"]},sidebar:"tutorialSidebar",previous:{title:"Listing indexes in Postgres",permalink:"/docs/postgres_guides/listing-indexes-in-postgres/"},next:{title:"Postgres Basics",permalink:"/docs/category/postgres-basics"}},h={},k=[{value:"<code>CREATE TABLE</code> with JSON data type statements",id:"create-table-with-json-data-type-statements",level:2},{value:"<code>INSERT</code> JSON data statements",id:"insert-json-data-statements",level:2},{value:"Displaying JSON data statements",id:"displaying-json-data-statements",level:2},{value:"Delete JSON data",id:"delete-json-data",level:2},{value:"Working with Nested JSON",id:"working-with-nested-json",level:2},{value:"Conclusion",id:"conclusion",level:2}],f={toc:k},b="wrapper";function y(e){let{components:t,...a}=e;return(0,s.kt)(b,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"working-with-json-data-in-postgres"},"Working with JSON Data in Postgres"),(0,s.kt)("p",null,"JSON (JavaScript Object Notation) is a compact format designed for the storage and sharing of data. Postgres allows the users to use JSON as a data type to store and fetch data."),(0,s.kt)("p",null,"The JSON data type gives Postgres capabilities that resemble document databases like MongoDB or Firestore. It grants great flexibility on the kinds of data that a document can hold, as the schema (i.e. the shape) of the data does not have to be known beforehand."),(0,s.kt)("p",null,"In this guide, we will study how you can store JSON data in Postgres database and perform multiple operations on it. Let\u2019s get started."),(0,s.kt)("h2",{id:"create-table-with-json-data-type-statements"},(0,s.kt)("inlineCode",{parentName:"h2"},"CREATE TABLE")," with JSON data type statements"),(0,s.kt)("p",null,"JSON works like a regular data type, just like other data types in Postgres. So, to add a json data type column in a table, you can simply assign ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON")," data type to that column."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"CREATE TABLE table_name (\n    id serial PRIMARY KEY,\n    data JSON\n);\n")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Make sure to connect your desired Postgres database before executing these commands. Check out ",(0,s.kt)("a",{parentName:"p",href:"https://tembo.io/docs/postgres_guides/how-to-connect-to-postgres/"},"our guide to follow the step-by-step process"),".")),(0,s.kt)("h2",{id:"insert-json-data-statements"},(0,s.kt)("inlineCode",{parentName:"h2"},"INSERT")," JSON data statements"),(0,s.kt)("p",null,"Since JSON data type is actually an object data type consisting of key-value pairs. So, to insert JSON data in the table, we have to pass the data in the object format."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'INSERT INTO table_name (data)\nVALUES (\'{"key1": "value1", "key2": value2}\');\n')),(0,s.kt)("p",null,"you can also insert multiple JSON values at once:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'INSERT INTO table_name (data)\nVALUES  (\'{"key1": "value1", "key2": value2}\'),\n        (\'{"key3": "value3", "key4": value4}\'),\n        (\'{"key5": "value5", "key6": value6}\');\n')),(0,s.kt)("h2",{id:"displaying-json-data-statements"},"Displaying JSON data statements"),(0,s.kt)("p",null,"You can simply get the JSON data type column and display it:"),(0,s.kt)("img",{src:o,width:"600",alt:"DisplayingData"}),(0,s.kt)("p",null,"Postgres comes with 2 built-in operators to operate over JSON objects: ",(0,s.kt)("inlineCode",{parentName:"p"},"->")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"->>"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"->")," operator returns the JSON value as key data type. In other words, it returns the elements as JSON data type."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"->>")," operator returns the JSON value as string (text) data type.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"select info -> 'name' as names from students;\n")),(0,s.kt)("img",{src:r,width:"600",alt:"Operator1"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"select info ->> 'name' as names from students;\n")),(0,s.kt)("img",{src:i,width:"600",alt:"Operator2"}),(0,s.kt)("p",null,"You can also use the \u2018WHERE\u2019 clause to filter out the data:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SELECT * FROM students WHERE info->>'age' < '15';\n")),(0,s.kt)("img",{src:l,width:"600",alt:"WhereClause"}),(0,s.kt)("p",null,"PostgreSQL also comes with multiple built-in json functions that you can use to manipulate data."),(0,s.kt)("p",null,"One of them is ",(0,s.kt)("inlineCode",{parentName:"p"},"json_each")," which allows you to unravel the top-level JSON object into a collection of key-value pairs."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"}," select json_each(info) FROM students;\n")),(0,s.kt)("img",{src:p,width:"500",alt:"JsonEach"}),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"jsonb_set")," function helps to update the value in the table following a specified condition."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"UPDATE \"students\" SET \"info\"=jsonb_set(\"info\"::jsonb, '{age}', '16') WHERE \"info\"::json->>'name'='John';\n")),(0,s.kt)("img",{src:d,width:"900",alt:"Update"}),(0,s.kt)("p",null,"There are many other json functions that you can use to manipulate data; to learn more, ",(0,s.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/9.5/functions-json.html"},"check their official documentation"),"."),(0,s.kt)("h2",{id:"delete-json-data"},"Delete JSON data"),(0,s.kt)("p",null,"You can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"DELETE")," statement to delete any specific row:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"DELETE FROM students WHERE info->>'name' = 'John';\n")),(0,s.kt)("h2",{id:"working-with-nested-json"},"Working with Nested JSON"),(0,s.kt)("p",null,"If a key in JSON data has an object as it\u2019s value, we can use the combination of both ",(0,s.kt)("inlineCode",{parentName:"p"},"->")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"->>")," operators to target that data."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"}," SELECT info->'age'->>'years' nested_age FROM students;\n")),(0,s.kt)("img",{src:c,width:"600",alt:"Nested"}),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"In this guide, we studied how you can work with JSON data in the Postgres database from inserting in a table to manipulating data to deleting data."),(0,s.kt)("p",null,"Struggling to connect to Postgres on your project? Check out our other ",(0,s.kt)("a",{parentName:"p",href:"https://tembo.io/docs/category/postgres-guides"},"Postgres guides")," for more help."))}y.isMDXComponent=!0}}]);