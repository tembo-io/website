"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7680],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return n?r.createElement(k,a(a({ref:t},u),{},{components:n})):r.createElement(k,a({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},50278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const l={sidebar_position:3,tags:["local"]},a="Try extensions locally",i={unversionedId:"tembo-cloud/try-extensions-locally",id:"tembo-cloud/try-extensions-locally",title:"Try extensions locally",description:"Run a Postgres container locally and install extensions with Trunk.",source:"@site/docs/tembo-cloud/try-extensions-locally.md",sourceDirName:"tembo-cloud",slug:"/tembo-cloud/try-extensions-locally",permalink:"/docs/tembo-cloud/try-extensions-locally",draft:!1,editUrl:"https://github.com/tembo-io/website/blob/main/docs/tembo-cloud/try-extensions-locally.md",tags:[{label:"local",permalink:"/docs/tags/local"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["local"]},sidebar:"tutorialSidebar",previous:{title:"More secure connections",permalink:"/docs/tembo-cloud/security-and-authentication/connecting-with-stronger-sslmode"},next:{title:"Logs",permalink:"/docs/tembo-cloud/logs"}},s={},c=[{value:"Start Postgres using Docker",id:"start-postgres-using-docker",level:2},{value:"Install extensions with Trunk",id:"install-extensions-with-trunk",level:2},{value:"Enabling extensions",id:"enabling-extensions",level:2},{value:"Create a custom image",id:"create-a-custom-image",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"try-extensions-locally"},"Try extensions locally"),(0,o.kt)("p",null,"Run a Postgres container locally and install extensions with Trunk."),(0,o.kt)("p",null,"There's an example of using this method of trying extensions in the blog ",(0,o.kt)("a",{parentName:"p",href:"https://tembo.io/blog/table-version-history"},"Version History and Lifecycle Policies for Postgres Tables"),"."),(0,o.kt)("h2",{id:"start-postgres-using-docker"},"Start Postgres using Docker"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can start a Postgres container locally like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run -d -it --name local-tembo -p 5432:5432 --rm quay.io/tembo/tembo-local\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The above image includes common system dependencies for extensions listed in ",(0,o.kt)("a",{parentName:"li",href:"https://pgt.dev"},"Trunk"),". Some extensions have very large dependencies, and these are not included.")),(0,o.kt)("h2",{id:"install-extensions-with-trunk"},"Install extensions with Trunk"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Browse ",(0,o.kt)("a",{parentName:"li",href:"https://pgt.dev"},"Trunk")," to find interesting extensions."),(0,o.kt)("li",{parentName:"ul"},"Get a shell connection into your Postgres container:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker exec -it local-tembo /bin/bash\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trunk install")," an extension:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"trunk install pgmq\n")),(0,o.kt)("h2",{id:"enabling-extensions"},"Enabling extensions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connect to Postgres. This works from inside or outside the Postgres container.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"psql postgres://postgres:postgres@localhost:5432\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enable an extension. Note a hyphenated extension name, e.g., ",(0,o.kt)("inlineCode",{parentName:"li"},"uuid-ossp"),", will require double quotes when enabling.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE EXTENSION pgmq CASCADE;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"List enabled extensions.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\\dx\n")),(0,o.kt)("h2",{id:"create-a-custom-image"},"Create a custom image"),(0,o.kt)("p",null,"After using the above process to experiment with extensions, you may want to build a custom image that you can start with all your extensions ready to go."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Optionally, create a Postgres configuration file. Some extensions require configuration, for example ",(0,o.kt)("inlineCode",{parentName:"li"},"shared_preload_libraries"),", or extension-specific configurations like ",(0,o.kt)("inlineCode",{parentName:"li"},"cron.host"),". In this example, we have named the file ",(0,o.kt)("inlineCode",{parentName:"li"},"custom.conf"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"shared_preload_libraries = 'pg_partman_bgw'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Optionally, create a startup SQL script. This script can be used to enable your extension, or other startup logic for your local development. In this example, we have named the file ",(0,o.kt)("inlineCode",{parentName:"li"},"startup.sql"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE EXTENSION IF NOT EXISTS pg_partman CASCADE;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a Dockerfile:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"FROM quay.io/tembo/tembo-local:latest\n\n# Optional:\n# Install any extensions you want with Trunk\nRUN trunk install pg_partman\n\n# Optional:\n# Specify extra Postgres configurations by copying into this directory\nCOPY custom.conf $PGDATA/extra-configs\n\n# Optional:\n# Specify startup SQL scripts by copying into this directory\nCOPY startup.sql $PGDATA/startup-scripts\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We now have the following files present in our directory:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 custom.conf\n\u2514\u2500\u2500 startup.sql\n\n1 directory, 3 files\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This setup allows you to build an image that will start with your extensions ready to go:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Build the image\ndocker build -t example-local-image .\n\n# If you have another container running with the same name, delete it\ndocker rm --force local-tembo\n\n# Run your custom image\ndocker run -d -it --name local-tembo -p 5432:5432 --rm example-local-image\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connect to postgres in the same way as before:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"psql postgres://postgres:postgres@localhost:5432\n")))}m.isMDXComponent=!0}}]);