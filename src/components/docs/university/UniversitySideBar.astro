---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import Logo from '../../../images/logoWithText.svg';
import { Image } from 'astro:assets';
import Home from '../../../images/home.svg';
import SidebarItems from './SidebarItems';
import Line from '../Line.astro';
import sidebarConfig from './sidebarConfig.json';

const allUniversityContent = await getCollection('university');

interface SidebarItem {
	title: string;
	entry?: CollectionEntry<'university'>;
	[key: string]:
		| SidebarItem
		| string
		| CollectionEntry<'university'>
		| undefined;
}

function buildSidebarStructure(
	entries: CollectionEntry<'university'>[],
): SidebarItem {
	const structure = {} as SidebarItem;

	entries.forEach((entry) => {
		const parts = entry.slug.split('/');
		let current: SidebarItem = structure;
		// console.log('current', entry);
		console.log(parts);

		parts.forEach((part, index) => {
			if (index === parts.length - 1 && part === 'index') {
				// This is an index.md file
				console.log('hello', entry.data.title, current.title, part);
				Object.assign(current, {
					indexEntry: entry,
					title: entry.data.title || current.title || part,
				});
			} else {
				if (!current[part]) {
					const customTitle =
						sidebarConfig.folderTitles[
							part as keyof typeof sidebarConfig.folderTitles
						] || part;
					current[part] = { title: customTitle };
					// current[part] = { title: part };
				}
				if (index === parts.length - 1) {
					Object.assign(current[part] as SidebarItem, { entry });
				} else {
					current = current[part] as SidebarItem;
				}
			}
		});
	});

	return structure;
}

const sidebarStructure = buildSidebarStructure(allUniversityContent);

const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);

let displayStructure: SidebarItem;
if (pathParts.length > 2 && pathParts[1] === 'courses') {
	displayStructure = {
		courses: sidebarStructure['courses'] as SidebarItem,
	} as unknown as SidebarItem;
} else {
	displayStructure = {
		...Object.fromEntries(
			Object.entries(sidebarStructure).filter(
				([key]) => key !== 'courses',
			),
		),
		courses: {
			title: 'Courses',
			entry: (sidebarStructure.courses as SidebarItem)?.['entry'],
			...Object.fromEntries(
				Object.entries(sidebarStructure.courses || {})
					.filter(([key]) => key !== 'entry' && key !== 'title')
					.map(([key, value]) => [
						key,
						{
							title: (value as SidebarItem).title,
							entry: (value as SidebarItem).entry,
						},
					]),
			),
		},
	} as unknown as SidebarItem;
}
---

<nav
	class='border-r border-r-[#EAEAEA33] max-w-[280px] w-full hidden min-[1000px]:flex transition-all duration-150 ease-in'
>
	<div class='h-screen relative w-full overflow-y-scroll'>
		<div class='sticky top-0 px-8 z-10 mb-2'>
			<a
				href={'/university'}
				class='flex items-center gap-2 bg-offBlack pt-8 pb-6'
			>
				<Image
					src={Logo}
					alt='tembo elephant logo and name'
					width={120}
				/>
				<span
					class='bg-gradient-to-r from-salmon via-purple to-lightPurple inline-block text-transparent bg-clip-text text-xs uppercase'
					>University</span
				>
			</a>
			<div
				class='bg-gradient-to-b from-offBlack to-transparent h-4 w-full'
			>
			</div>
		</div>
		<div
			class='flex flex-col px-8 pb-8 transition-all duration-200 ease-out z-1'
		>
			<a
				href={`/university`}
				class='font-secondary font-extrabold flex items-center gap-4'
			>
				<Image src={Home} alt='home' width={20} />
				University
			</a>

			<div class='my-6'>
				<Line />
			</div>
			<SidebarItems
				structure={displayStructure}
				currentPath={currentPath}
				isTopLevel={pathParts.length <= 2}
				client:load
			/>
		</div>
	</div>
</nav>
